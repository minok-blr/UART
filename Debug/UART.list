
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017f0  080017f0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017f0  080017f0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f0  080017f0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000064  0800185c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  0800185c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b44  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006f2  00000000  00000000  00022bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000232d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00023410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bb7f  00000000  00000000  00023518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001582  00000000  00000000  0002f097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003bef4  00000000  00000000  00030619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006c50d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bf4  00000000  00000000  0006c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800172c 	.word	0x0800172c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	0800172c 	.word	0x0800172c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ITM_SendChar>:
  volatile const  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Register #2 */
  volatile const  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Register #3 */
} ITM_Type;

static inline uint32_t ITM_SendChar (uint32_t ch)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  #define ITM ((ITM_Type*)0xE0000000UL)   /*!< ITM configuration struct */
  if (((ITM->TCR & 1UL) != 0UL) &&      /* ITM enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d013      	beq.n	80002c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & 1UL) != 0UL) &&      /* ITM enabled */
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002a8:	e000      	b.n	80002ac <ITM_SendChar+0x2c>
    {
    	__asm volatile ("nop");
 80002aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	b2d2      	uxtb	r2, r2
 80002be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002c0:	687b      	ldr	r3, [r7, #4]
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_write>:

int _write(int file, char *ptr, int len)
{
 80002ce:	b580      	push	{r7, lr}
 80002d0:	b086      	sub	sp, #24
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	60f8      	str	r0, [r7, #12]
 80002d6:	60b9      	str	r1, [r7, #8]
 80002d8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]
 80002e2:	e009      	b.n	80002f8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	60ba      	str	r2, [r7, #8]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ffc7 	bl	8000280 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	697a      	ldr	r2, [r7, #20]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	dbf1      	blt.n	80002e4 <_write+0x16>
  return len;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <CONFIG>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void CONFIG()
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	// enable gpio b and c clocks, and usart 1 and 6 clocks
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOAEN); // enable A clock
 8000310:	4b5b      	ldr	r3, [pc, #364]	; (8000480 <CONFIG+0x174>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a5a      	ldr	r2, [pc, #360]	; (8000480 <CONFIG+0x174>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIODEN); // enable D clock
 800031c:	4b58      	ldr	r3, [pc, #352]	; (8000480 <CONFIG+0x174>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a57      	ldr	r2, [pc, #348]	; (8000480 <CONFIG+0x174>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN); // enable B clock
 8000328:	4b55      	ldr	r3, [pc, #340]	; (8000480 <CONFIG+0x174>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a54      	ldr	r2, [pc, #336]	; (8000480 <CONFIG+0x174>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOCEN); // enable C clock
 8000334:	4b52      	ldr	r3, [pc, #328]	; (8000480 <CONFIG+0x174>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a51      	ldr	r2, [pc, #324]	; (8000480 <CONFIG+0x174>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);// USART1
 8000340:	4b4f      	ldr	r3, [pc, #316]	; (8000480 <CONFIG+0x174>)
 8000342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000344:	4a4e      	ldr	r2, [pc, #312]	; (8000480 <CONFIG+0x174>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6453      	str	r3, [r2, #68]	; 0x44
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART6EN);// USART6
 800034c:	4b4c      	ldr	r3, [pc, #304]	; (8000480 <CONFIG+0x174>)
 800034e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000350:	4a4b      	ldr	r2, [pc, #300]	; (8000480 <CONFIG+0x174>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6453      	str	r3, [r2, #68]	; 0x44

	// set PB6 and PC7 pins to alternate function mode
	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER6_1);
 8000358:	4b4a      	ldr	r3, [pc, #296]	; (8000484 <CONFIG+0x178>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a49      	ldr	r2, [pc, #292]	; (8000484 <CONFIG+0x178>)
 800035e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000362:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOB->MODER, GPIO_MODER_MODER6_0);
 8000364:	4b47      	ldr	r3, [pc, #284]	; (8000484 <CONFIG+0x178>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a46      	ldr	r2, [pc, #280]	; (8000484 <CONFIG+0x178>)
 800036a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800036e:	6013      	str	r3, [r2, #0]

	SET_BIT(GPIOC->MODER, GPIO_MODER_MODER7_1);
 8000370:	4b45      	ldr	r3, [pc, #276]	; (8000488 <CONFIG+0x17c>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a44      	ldr	r2, [pc, #272]	; (8000488 <CONFIG+0x17c>)
 8000376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037a:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOC->MODER, GPIO_MODER_MODER7_0);
 800037c:	4b42      	ldr	r3, [pc, #264]	; (8000488 <CONFIG+0x17c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a41      	ldr	r2, [pc, #260]	; (8000488 <CONFIG+0x17c>)
 8000382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000386:	6013      	str	r3, [r2, #0]

	// PB6, set AFRL6 to AF7(USART1) TX
	CLEAR_BIT(GPIOB->AFR[0], 1<<27);
 8000388:	4b3e      	ldr	r3, [pc, #248]	; (8000484 <CONFIG+0x178>)
 800038a:	6a1b      	ldr	r3, [r3, #32]
 800038c:	4a3d      	ldr	r2, [pc, #244]	; (8000484 <CONFIG+0x178>)
 800038e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000392:	6213      	str	r3, [r2, #32]
	SET_BIT(GPIOB->AFR[0], 1<<26);
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <CONFIG+0x178>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <CONFIG+0x178>)
 800039a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800039e:	6213      	str	r3, [r2, #32]
	SET_BIT(GPIOB->AFR[0], 1<<25);
 80003a0:	4b38      	ldr	r3, [pc, #224]	; (8000484 <CONFIG+0x178>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a37      	ldr	r2, [pc, #220]	; (8000484 <CONFIG+0x178>)
 80003a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003aa:	6213      	str	r3, [r2, #32]
	SET_BIT(GPIOB->AFR[0], 1<<24);
 80003ac:	4b35      	ldr	r3, [pc, #212]	; (8000484 <CONFIG+0x178>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a34      	ldr	r2, [pc, #208]	; (8000484 <CONFIG+0x178>)
 80003b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b6:	6213      	str	r3, [r2, #32]

	// PC7, set AFRL7 to AF8(USART6) RX
	SET_BIT(GPIOC->AFR[0], 1<<31);
 80003b8:	4b33      	ldr	r3, [pc, #204]	; (8000488 <CONFIG+0x17c>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a32      	ldr	r2, [pc, #200]	; (8000488 <CONFIG+0x17c>)
 80003be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003c2:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(GPIOC->AFR[0], 1<<30);
 80003c4:	4b30      	ldr	r3, [pc, #192]	; (8000488 <CONFIG+0x17c>)
 80003c6:	6a1b      	ldr	r3, [r3, #32]
 80003c8:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <CONFIG+0x17c>)
 80003ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80003ce:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(GPIOC->AFR[0], 1<<29);
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <CONFIG+0x17c>)
 80003d2:	6a1b      	ldr	r3, [r3, #32]
 80003d4:	4a2c      	ldr	r2, [pc, #176]	; (8000488 <CONFIG+0x17c>)
 80003d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003da:	6213      	str	r3, [r2, #32]
	CLEAR_BIT(GPIOC->AFR[0], 1<<28);
 80003dc:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <CONFIG+0x17c>)
 80003de:	6a1b      	ldr	r3, [r3, #32]
 80003e0:	4a29      	ldr	r2, [pc, #164]	; (8000488 <CONFIG+0x17c>)
 80003e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80003e6:	6213      	str	r3, [r2, #32]

	// UART CONFIG PB6
	SET_BIT(USART1->CR1, USART_CR1_UE); 	// 1. enable UE bit
 80003e8:	4b28      	ldr	r3, [pc, #160]	; (800048c <CONFIG+0x180>)
 80003ea:	899b      	ldrh	r3, [r3, #12]
 80003ec:	b29b      	uxth	r3, r3
 80003ee:	4a27      	ldr	r2, [pc, #156]	; (800048c <CONFIG+0x180>)
 80003f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	8193      	strh	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_M);  	// 2. set M bit for word len, in this case 8 bits
 80003f8:	4b24      	ldr	r3, [pc, #144]	; (800048c <CONFIG+0x180>)
 80003fa:	899b      	ldrh	r3, [r3, #12]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4a23      	ldr	r2, [pc, #140]	; (800048c <CONFIG+0x180>)
 8000400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000404:	b29b      	uxth	r3, r3
 8000406:	8193      	strh	r3, [r2, #12]
	CLEAR_BIT(USART1->CR1, USART_CR1_OVER8);// 3. oversampling by 16
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <CONFIG+0x180>)
 800040a:	899b      	ldrh	r3, [r3, #12]
 800040c:	b29b      	uxth	r3, r3
 800040e:	4a1f      	ldr	r2, [pc, #124]	; (800048c <CONFIG+0x180>)
 8000410:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000414:	b29b      	uxth	r3, r3
 8000416:	8193      	strh	r3, [r2, #12]
	USART1->BRR = (11<<0) | (8<<4);			// 4. baud rate 8.6875, DIV_MANTISSA = 0x8, DIV_FRAC = 0xB 0b1011
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <CONFIG+0x180>)
 800041a:	228b      	movs	r2, #139	; 0x8b
 800041c:	811a      	strh	r2, [r3, #8]
	SET_BIT(USART1->CR1, USART_CR1_TE); 	// 5. set TE in USART_CR1 to send idle frame as 1st transmission
 800041e:	4b1b      	ldr	r3, [pc, #108]	; (800048c <CONFIG+0x180>)
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	b29b      	uxth	r3, r3
 8000424:	4a19      	ldr	r2, [pc, #100]	; (800048c <CONFIG+0x180>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	b29b      	uxth	r3, r3
 800042c:	8193      	strh	r3, [r2, #12]

	// 6. write to USART_DR(clears the TXE bit) and repeat for the whole buffer
	// 7. wait until TC == 1, when USART disabled/enters halt mode

	// UART CONFIG PC7
	SET_BIT(USART6->CR1, USART_CR1_UE); 	// 1. enable UE bit
 800042e:	4b18      	ldr	r3, [pc, #96]	; (8000490 <CONFIG+0x184>)
 8000430:	899b      	ldrh	r3, [r3, #12]
 8000432:	b29b      	uxth	r3, r3
 8000434:	4a16      	ldr	r2, [pc, #88]	; (8000490 <CONFIG+0x184>)
 8000436:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800043a:	b29b      	uxth	r3, r3
 800043c:	8193      	strh	r3, [r2, #12]
	CLEAR_BIT(USART6->CR1, USART_CR1_M);  	// 2. set M bit for word len, in this case 8 bits
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <CONFIG+0x184>)
 8000440:	899b      	ldrh	r3, [r3, #12]
 8000442:	b29b      	uxth	r3, r3
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <CONFIG+0x184>)
 8000446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800044a:	b29b      	uxth	r3, r3
 800044c:	8193      	strh	r3, [r2, #12]
	CLEAR_BIT(USART6->CR1, USART_CR1_OVER8);// 3. oversampling by 16
 800044e:	4b10      	ldr	r3, [pc, #64]	; (8000490 <CONFIG+0x184>)
 8000450:	899b      	ldrh	r3, [r3, #12]
 8000452:	b29b      	uxth	r3, r3
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <CONFIG+0x184>)
 8000456:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800045a:	b29b      	uxth	r3, r3
 800045c:	8193      	strh	r3, [r2, #12]
	USART6->BRR = (11<<0) | (8<<4);			// 4. baud rate 8.6875, DIV_MANTISSA = 0x8, DIV_FRAC = 0xB 0b1011
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <CONFIG+0x184>)
 8000460:	228b      	movs	r2, #139	; 0x8b
 8000462:	811a      	strh	r2, [r3, #8]
	SET_BIT(USART6->CR1, USART_CR1_RE); 	// 5. set TE in USART_CR1 to send idle frame as 1st transmission
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <CONFIG+0x184>)
 8000466:	899b      	ldrh	r3, [r3, #12]
 8000468:	b29b      	uxth	r3, r3
 800046a:	4a09      	ldr	r2, [pc, #36]	; (8000490 <CONFIG+0x184>)
 800046c:	f043 0304 	orr.w	r3, r3, #4
 8000470:	b29b      	uxth	r3, r3
 8000472:	8193      	strh	r3, [r2, #12]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800
 800048c:	40011000 	.word	0x40011000
 8000490:	40011400 	.word	0x40011400

08000494 <sendChar>:

void sendChar(uint8_t letter, uint8_t iter)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	460a      	mov	r2, r1
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71bb      	strb	r3, [r7, #6]
	WRITE_REG(USART1->DR, letter);
 80004a4:	4b14      	ldr	r3, [pc, #80]	; (80004f8 <sendChar+0x64>)
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	b292      	uxth	r2, r2
 80004aa:	809a      	strh	r2, [r3, #4]
	//USART1->DR = letter; // save data in data register
	while(!(USART1->SR & (1<<6))); // wait for transmission to happen
 80004ac:	bf00      	nop
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <sendChar+0x64>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f8      	beq.n	80004ae <sendChar+0x1a>
	for (int i = 0;i < 10000; ++i) {
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	e002      	b.n	80004c8 <sendChar+0x34>
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	3301      	adds	r3, #1
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80004ce:	4293      	cmp	r3, r2
 80004d0:	ddf7      	ble.n	80004c2 <sendChar+0x2e>

	}
	buffer[iter] = USART6->DR;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <sendChar+0x68>)
 80004d4:	889b      	ldrh	r3, [r3, #4]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	b2d1      	uxtb	r1, r2
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <sendChar+0x6c>)
 80004de:	54d1      	strb	r1, [r2, r3]
	printf("%c\n", USART6->DR);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <sendChar+0x68>)
 80004e2:	889b      	ldrh	r3, [r3, #4]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4619      	mov	r1, r3
 80004e8:	4806      	ldr	r0, [pc, #24]	; (8000504 <sendChar+0x70>)
 80004ea:	f000 f9c9 	bl	8000880 <iprintf>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40011000 	.word	0x40011000
 80004fc:	40011400 	.word	0x40011400
 8000500:	20000080 	.word	0x20000080
 8000504:	08001744 	.word	0x08001744

08000508 <USART1_SendData>:

void USART1_SendData(uint8_t choice){
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	uint8_t iter = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
	char *word = (char*)'0';
 8000516:	2330      	movs	r3, #48	; 0x30
 8000518:	60bb      	str	r3, [r7, #8]
	if(choice == 1) word = "TIPKA";
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d102      	bne.n	8000526 <USART1_SendData+0x1e>
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <USART1_SendData+0x4c>)
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	e00d      	b.n	8000542 <USART1_SendData+0x3a>
	else word = "WRONG";
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <USART1_SendData+0x50>)
 8000528:	60bb      	str	r3, [r7, #8]
	while(*word) sendChar(*word++, iter++);
 800052a:	e00a      	b.n	8000542 <USART1_SendData+0x3a>
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	60ba      	str	r2, [r7, #8]
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	1c59      	adds	r1, r3, #1
 8000538:	73f9      	strb	r1, [r7, #15]
 800053a:	4619      	mov	r1, r3
 800053c:	4610      	mov	r0, r2
 800053e:	f7ff ffa9 	bl	8000494 <sendChar>
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1f0      	bne.n	800052c <USART1_SendData+0x24>

}
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	08001748 	.word	0x08001748
 8000558:	08001750 	.word	0x08001750

0800055c <main>:
	letter = READ_REG(USART6->DR);
	printf("%c\n", letter);
}

int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
	CONFIG();
 8000562:	f7ff fed3 	bl	800030c <CONFIG>

	// set PA0 to input
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODER0_1);
 8000566:	4b50      	ldr	r3, [pc, #320]	; (80006a8 <main+0x14c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a4f      	ldr	r2, [pc, #316]	; (80006a8 <main+0x14c>)
 800056c:	f023 0302 	bic.w	r3, r3, #2
 8000570:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOA->MODER, GPIO_MODER_MODER0_0);
 8000572:	4b4d      	ldr	r3, [pc, #308]	; (80006a8 <main+0x14c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a4c      	ldr	r2, [pc, #304]	; (80006a8 <main+0x14c>)
 8000578:	f023 0301 	bic.w	r3, r3, #1
 800057c:	6013      	str	r3, [r2, #0]

	// set pd14 to output RED_LED
	SET_BIT(GPIOD->MODER, GPIO_MODER_MODER14_0);
 800057e:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <main+0x150>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a4a      	ldr	r2, [pc, #296]	; (80006ac <main+0x150>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOD->MODER, GPIO_MODER_MODER14_1);
 800058a:	4b48      	ldr	r3, [pc, #288]	; (80006ac <main+0x150>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a47      	ldr	r2, [pc, #284]	; (80006ac <main+0x150>)
 8000590:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000594:	6013      	str	r3, [r2, #0]

	// GREEN LED PD12
	SET_BIT(GPIOD->MODER, GPIO_MODER_MODER12_0);
 8000596:	4b45      	ldr	r3, [pc, #276]	; (80006ac <main+0x150>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a44      	ldr	r2, [pc, #272]	; (80006ac <main+0x150>)
 800059c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005a0:	6013      	str	r3, [r2, #0]
	CLEAR_BIT(GPIOD->MODER, GPIO_MODER_MODER12_1);
 80005a2:	4b42      	ldr	r3, [pc, #264]	; (80006ac <main+0x150>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a41      	ldr	r2, [pc, #260]	; (80006ac <main+0x150>)
 80005a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80005ac:	6013      	str	r3, [r2, #0]
//	*aModer &= ~(1<<1); // bit 1 to 0

	//uint32_t *aIdr = (uint32_t*)GPIOA->IDR;;
	//uint32_t *dOdr = (uint32_t*)GPIOD->ODR;

	uint8_t confidence = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	77fb      	strb	r3, [r7, #31]
	uint8_t threshold = 15;
 80005b2:	230f      	movs	r3, #15
 80005b4:	73fb      	strb	r3, [r7, #15]
	uint8_t buttonSwitch = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	77bb      	strb	r3, [r7, #30]
	uint8_t prevButtonState = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	777b      	strb	r3, [r7, #29]
	int counter = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]



    /* Loop forever */
	for (;;) {
		int32_t buttonState = GPIOA->IDR & USER_BUTTON_PIN;
 80005c2:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <main+0x14c>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]

		if (confidence > threshold && buttonState == 0) {
 80005cc:	7ffa      	ldrb	r2, [r7, #31]
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d904      	bls.n	80005de <main+0x82>
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <main+0x82>
			buttonSwitch = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	77bb      	strb	r3, [r7, #30]
		}

		if (buttonState != 0 && prevButtonState != 0) {
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d006      	beq.n	80005f2 <main+0x96>
 80005e4:	7f7b      	ldrb	r3, [r7, #29]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <main+0x96>
			confidence++;
 80005ea:	7ffb      	ldrb	r3, [r7, #31]
 80005ec:	3301      	adds	r3, #1
 80005ee:	77fb      	strb	r3, [r7, #31]
 80005f0:	e001      	b.n	80005f6 <main+0x9a>
		}
		else {
			confidence = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	77fb      	strb	r3, [r7, #31]
		}

		if (buttonSwitch == 1)
 80005f6:	7fbb      	ldrb	r3, [r7, #30]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d14d      	bne.n	8000698 <main+0x13c>
		{
			// do something
			counter++;
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	3301      	adds	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
			USART1_SendData(counter%2);
 8000602:	69bb      	ldr	r3, [r7, #24]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	bfb8      	it	lt
 800060c:	425b      	neglt	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff79 	bl	8000508 <USART1_SendData>

			//check what is received
			uint8_t strength = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	75fb      	strb	r3, [r7, #23]
			char* word = "TIPKA";
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <main+0x154>)
 800061c:	607b      	str	r3, [r7, #4]
			for (int i = 0; i < 5; i++) {
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	e010      	b.n	8000646 <main+0xea>
				if(buffer[i] == word[i])
 8000624:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <main+0x158>)
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	440b      	add	r3, r1
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d102      	bne.n	8000640 <main+0xe4>
				{
					strength++;
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	3301      	adds	r3, #1
 800063e:	75fb      	strb	r3, [r7, #23]
			for (int i = 0; i < 5; i++) {
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	3301      	adds	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	2b04      	cmp	r3, #4
 800064a:	ddeb      	ble.n	8000624 <main+0xc8>
				}
			}
			if(strength == 5)
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	2b05      	cmp	r3, #5
 8000650:	d10e      	bne.n	8000670 <main+0x114>
			{
				GPIOD->ODR |= GREEN_LED_PIN;
 8000652:	4b16      	ldr	r3, [pc, #88]	; (80006ac <main+0x150>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <main+0x150>)
 8000658:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800065c:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~RED_LED_PIN;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <main+0x150>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a12      	ldr	r2, [pc, #72]	; (80006ac <main+0x150>)
 8000664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000668:	6153      	str	r3, [r2, #20]
				strength = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	75fb      	strb	r3, [r7, #23]
 800066e:	e00d      	b.n	800068c <main+0x130>
			}
			else
			{
				GPIOD->ODR |= RED_LED_PIN;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0x150>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <main+0x150>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6153      	str	r3, [r2, #20]
				GPIOD->ODR &= ~GREEN_LED_PIN;
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <main+0x150>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <main+0x150>)
 8000682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000686:	6153      	str	r3, [r2, #20]
				strength = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
			}
			confidence = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	77fb      	strb	r3, [r7, #31]
			buttonSwitch = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	77bb      	strb	r3, [r7, #30]
			prevButtonState = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	777b      	strb	r3, [r7, #29]
		}

		prevButtonState = buttonState;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	777b      	strb	r3, [r7, #29]
		if(counter == 99) counter = 0;
 800069c:	69bb      	ldr	r3, [r7, #24]
 800069e:	2b63      	cmp	r3, #99	; 0x63
 80006a0:	d18f      	bne.n	80005c2 <main+0x66>
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
	for (;;) {
 80006a6:	e78c      	b.n	80005c2 <main+0x66>
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	08001748 	.word	0x08001748
 80006b4:	20000080 	.word	0x20000080

080006b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e00a      	b.n	80006e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006ca:	f3af 8000 	nop.w
 80006ce:	4601      	mov	r1, r0
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	b2ca      	uxtb	r2, r1
 80006d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbf0      	blt.n	80006ca <_read+0x12>
	}

return len;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	return -1;
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071a:	605a      	str	r2, [r3, #4]
	return 0;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_isatty>:

int _isatty(int file)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	return 1;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000764:	4a14      	ldr	r2, [pc, #80]	; (80007b8 <_sbrk+0x5c>)
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <_sbrk+0x60>)
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <_sbrk+0x64>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <_sbrk+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	429a      	cmp	r2, r3
 800078a:	d207      	bcs.n	800079c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800078c:	f000 f846 	bl	800081c <__errno>
 8000790:	4603      	mov	r3, r0
 8000792:	220c      	movs	r2, #12
 8000794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	e009      	b.n	80007b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <_sbrk+0x64>)
 80007ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20020000 	.word	0x20020000
 80007bc:	00000400 	.word	0x00000400
 80007c0:	20000088 	.word	0x20000088
 80007c4:	200000a8 	.word	0x200000a8

080007c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopForever+0xe>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopForever+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007f6:	f000 f817 	bl	8000828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff feaf 	bl	800055c <main>

080007fe <LoopForever>:

LoopForever:
    b LoopForever
 80007fe:	e7fe      	b.n	80007fe <LoopForever>
  ldr   r0, =_estack
 8000800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800080c:	080017f8 	.word	0x080017f8
  ldr r2, =_sbss
 8000810:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000814:	200000a4 	.word	0x200000a4

08000818 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC_IRQHandler>
	...

0800081c <__errno>:
 800081c:	4b01      	ldr	r3, [pc, #4]	; (8000824 <__errno+0x8>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <__libc_init_array>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4d0d      	ldr	r5, [pc, #52]	; (8000860 <__libc_init_array+0x38>)
 800082c:	4c0d      	ldr	r4, [pc, #52]	; (8000864 <__libc_init_array+0x3c>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	2600      	movs	r6, #0
 8000834:	42a6      	cmp	r6, r4
 8000836:	d109      	bne.n	800084c <__libc_init_array+0x24>
 8000838:	4d0b      	ldr	r5, [pc, #44]	; (8000868 <__libc_init_array+0x40>)
 800083a:	4c0c      	ldr	r4, [pc, #48]	; (800086c <__libc_init_array+0x44>)
 800083c:	f000 ff76 	bl	800172c <_init>
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	2600      	movs	r6, #0
 8000846:	42a6      	cmp	r6, r4
 8000848:	d105      	bne.n	8000856 <__libc_init_array+0x2e>
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000850:	4798      	blx	r3
 8000852:	3601      	adds	r6, #1
 8000854:	e7ee      	b.n	8000834 <__libc_init_array+0xc>
 8000856:	f855 3b04 	ldr.w	r3, [r5], #4
 800085a:	4798      	blx	r3
 800085c:	3601      	adds	r6, #1
 800085e:	e7f2      	b.n	8000846 <__libc_init_array+0x1e>
 8000860:	080017f0 	.word	0x080017f0
 8000864:	080017f0 	.word	0x080017f0
 8000868:	080017f0 	.word	0x080017f0
 800086c:	080017f4 	.word	0x080017f4

08000870 <memset>:
 8000870:	4402      	add	r2, r0
 8000872:	4603      	mov	r3, r0
 8000874:	4293      	cmp	r3, r2
 8000876:	d100      	bne.n	800087a <memset+0xa>
 8000878:	4770      	bx	lr
 800087a:	f803 1b01 	strb.w	r1, [r3], #1
 800087e:	e7f9      	b.n	8000874 <memset+0x4>

08000880 <iprintf>:
 8000880:	b40f      	push	{r0, r1, r2, r3}
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <iprintf+0x2c>)
 8000884:	b513      	push	{r0, r1, r4, lr}
 8000886:	681c      	ldr	r4, [r3, #0]
 8000888:	b124      	cbz	r4, 8000894 <iprintf+0x14>
 800088a:	69a3      	ldr	r3, [r4, #24]
 800088c:	b913      	cbnz	r3, 8000894 <iprintf+0x14>
 800088e:	4620      	mov	r0, r4
 8000890:	f000 f866 	bl	8000960 <__sinit>
 8000894:	ab05      	add	r3, sp, #20
 8000896:	9a04      	ldr	r2, [sp, #16]
 8000898:	68a1      	ldr	r1, [r4, #8]
 800089a:	9301      	str	r3, [sp, #4]
 800089c:	4620      	mov	r0, r4
 800089e:	f000 f983 	bl	8000ba8 <_vfiprintf_r>
 80008a2:	b002      	add	sp, #8
 80008a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr
 80008ac:	20000000 	.word	0x20000000

080008b0 <std>:
 80008b0:	2300      	movs	r3, #0
 80008b2:	b510      	push	{r4, lr}
 80008b4:	4604      	mov	r4, r0
 80008b6:	e9c0 3300 	strd	r3, r3, [r0]
 80008ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008be:	6083      	str	r3, [r0, #8]
 80008c0:	8181      	strh	r1, [r0, #12]
 80008c2:	6643      	str	r3, [r0, #100]	; 0x64
 80008c4:	81c2      	strh	r2, [r0, #14]
 80008c6:	6183      	str	r3, [r0, #24]
 80008c8:	4619      	mov	r1, r3
 80008ca:	2208      	movs	r2, #8
 80008cc:	305c      	adds	r0, #92	; 0x5c
 80008ce:	f7ff ffcf 	bl	8000870 <memset>
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <std+0x38>)
 80008d4:	6263      	str	r3, [r4, #36]	; 0x24
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <std+0x3c>)
 80008d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <std+0x40>)
 80008dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <std+0x44>)
 80008e0:	6224      	str	r4, [r4, #32]
 80008e2:	6323      	str	r3, [r4, #48]	; 0x30
 80008e4:	bd10      	pop	{r4, pc}
 80008e6:	bf00      	nop
 80008e8:	08001151 	.word	0x08001151
 80008ec:	08001173 	.word	0x08001173
 80008f0:	080011ab 	.word	0x080011ab
 80008f4:	080011cf 	.word	0x080011cf

080008f8 <_cleanup_r>:
 80008f8:	4901      	ldr	r1, [pc, #4]	; (8000900 <_cleanup_r+0x8>)
 80008fa:	f000 b8af 	b.w	8000a5c <_fwalk_reent>
 80008fe:	bf00      	nop
 8000900:	080014a9 	.word	0x080014a9

08000904 <__sfmoreglue>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	1e4a      	subs	r2, r1, #1
 8000908:	2568      	movs	r5, #104	; 0x68
 800090a:	4355      	muls	r5, r2
 800090c:	460e      	mov	r6, r1
 800090e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000912:	f000 f8c5 	bl	8000aa0 <_malloc_r>
 8000916:	4604      	mov	r4, r0
 8000918:	b140      	cbz	r0, 800092c <__sfmoreglue+0x28>
 800091a:	2100      	movs	r1, #0
 800091c:	e9c0 1600 	strd	r1, r6, [r0]
 8000920:	300c      	adds	r0, #12
 8000922:	60a0      	str	r0, [r4, #8]
 8000924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000928:	f7ff ffa2 	bl	8000870 <memset>
 800092c:	4620      	mov	r0, r4
 800092e:	bd70      	pop	{r4, r5, r6, pc}

08000930 <__sfp_lock_acquire>:
 8000930:	4801      	ldr	r0, [pc, #4]	; (8000938 <__sfp_lock_acquire+0x8>)
 8000932:	f000 b8b3 	b.w	8000a9c <__retarget_lock_acquire_recursive>
 8000936:	bf00      	nop
 8000938:	2000009c 	.word	0x2000009c

0800093c <__sfp_lock_release>:
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <__sfp_lock_release+0x8>)
 800093e:	f000 b8ae 	b.w	8000a9e <__retarget_lock_release_recursive>
 8000942:	bf00      	nop
 8000944:	2000009c 	.word	0x2000009c

08000948 <__sinit_lock_acquire>:
 8000948:	4801      	ldr	r0, [pc, #4]	; (8000950 <__sinit_lock_acquire+0x8>)
 800094a:	f000 b8a7 	b.w	8000a9c <__retarget_lock_acquire_recursive>
 800094e:	bf00      	nop
 8000950:	20000097 	.word	0x20000097

08000954 <__sinit_lock_release>:
 8000954:	4801      	ldr	r0, [pc, #4]	; (800095c <__sinit_lock_release+0x8>)
 8000956:	f000 b8a2 	b.w	8000a9e <__retarget_lock_release_recursive>
 800095a:	bf00      	nop
 800095c:	20000097 	.word	0x20000097

08000960 <__sinit>:
 8000960:	b510      	push	{r4, lr}
 8000962:	4604      	mov	r4, r0
 8000964:	f7ff fff0 	bl	8000948 <__sinit_lock_acquire>
 8000968:	69a3      	ldr	r3, [r4, #24]
 800096a:	b11b      	cbz	r3, 8000974 <__sinit+0x14>
 800096c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000970:	f7ff bff0 	b.w	8000954 <__sinit_lock_release>
 8000974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000978:	6523      	str	r3, [r4, #80]	; 0x50
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <__sinit+0x68>)
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <__sinit+0x6c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	62a2      	str	r2, [r4, #40]	; 0x28
 8000982:	42a3      	cmp	r3, r4
 8000984:	bf04      	itt	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	61a3      	streq	r3, [r4, #24]
 800098a:	4620      	mov	r0, r4
 800098c:	f000 f820 	bl	80009d0 <__sfp>
 8000990:	6060      	str	r0, [r4, #4]
 8000992:	4620      	mov	r0, r4
 8000994:	f000 f81c 	bl	80009d0 <__sfp>
 8000998:	60a0      	str	r0, [r4, #8]
 800099a:	4620      	mov	r0, r4
 800099c:	f000 f818 	bl	80009d0 <__sfp>
 80009a0:	2200      	movs	r2, #0
 80009a2:	60e0      	str	r0, [r4, #12]
 80009a4:	2104      	movs	r1, #4
 80009a6:	6860      	ldr	r0, [r4, #4]
 80009a8:	f7ff ff82 	bl	80008b0 <std>
 80009ac:	68a0      	ldr	r0, [r4, #8]
 80009ae:	2201      	movs	r2, #1
 80009b0:	2109      	movs	r1, #9
 80009b2:	f7ff ff7d 	bl	80008b0 <std>
 80009b6:	68e0      	ldr	r0, [r4, #12]
 80009b8:	2202      	movs	r2, #2
 80009ba:	2112      	movs	r1, #18
 80009bc:	f7ff ff78 	bl	80008b0 <std>
 80009c0:	2301      	movs	r3, #1
 80009c2:	61a3      	str	r3, [r4, #24]
 80009c4:	e7d2      	b.n	800096c <__sinit+0xc>
 80009c6:	bf00      	nop
 80009c8:	08001758 	.word	0x08001758
 80009cc:	080008f9 	.word	0x080008f9

080009d0 <__sfp>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	4607      	mov	r7, r0
 80009d4:	f7ff ffac 	bl	8000930 <__sfp_lock_acquire>
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <__sfp+0x84>)
 80009da:	681e      	ldr	r6, [r3, #0]
 80009dc:	69b3      	ldr	r3, [r6, #24]
 80009de:	b913      	cbnz	r3, 80009e6 <__sfp+0x16>
 80009e0:	4630      	mov	r0, r6
 80009e2:	f7ff ffbd 	bl	8000960 <__sinit>
 80009e6:	3648      	adds	r6, #72	; 0x48
 80009e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	d503      	bpl.n	80009f8 <__sfp+0x28>
 80009f0:	6833      	ldr	r3, [r6, #0]
 80009f2:	b30b      	cbz	r3, 8000a38 <__sfp+0x68>
 80009f4:	6836      	ldr	r6, [r6, #0]
 80009f6:	e7f7      	b.n	80009e8 <__sfp+0x18>
 80009f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009fc:	b9d5      	cbnz	r5, 8000a34 <__sfp+0x64>
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <__sfp+0x88>)
 8000a00:	60e3      	str	r3, [r4, #12]
 8000a02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a06:	6665      	str	r5, [r4, #100]	; 0x64
 8000a08:	f000 f847 	bl	8000a9a <__retarget_lock_init_recursive>
 8000a0c:	f7ff ff96 	bl	800093c <__sfp_lock_release>
 8000a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a18:	6025      	str	r5, [r4, #0]
 8000a1a:	61a5      	str	r5, [r4, #24]
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	4629      	mov	r1, r5
 8000a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a24:	f7ff ff24 	bl	8000870 <memset>
 8000a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a30:	4620      	mov	r0, r4
 8000a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a34:	3468      	adds	r4, #104	; 0x68
 8000a36:	e7d9      	b.n	80009ec <__sfp+0x1c>
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	f7ff ff62 	bl	8000904 <__sfmoreglue>
 8000a40:	4604      	mov	r4, r0
 8000a42:	6030      	str	r0, [r6, #0]
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d1d5      	bne.n	80009f4 <__sfp+0x24>
 8000a48:	f7ff ff78 	bl	800093c <__sfp_lock_release>
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	e7ee      	b.n	8000a30 <__sfp+0x60>
 8000a52:	bf00      	nop
 8000a54:	08001758 	.word	0x08001758
 8000a58:	ffff0001 	.word	0xffff0001

08000a5c <_fwalk_reent>:
 8000a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a60:	4606      	mov	r6, r0
 8000a62:	4688      	mov	r8, r1
 8000a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a68:	2700      	movs	r7, #0
 8000a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8000a72:	d505      	bpl.n	8000a80 <_fwalk_reent+0x24>
 8000a74:	6824      	ldr	r4, [r4, #0]
 8000a76:	2c00      	cmp	r4, #0
 8000a78:	d1f7      	bne.n	8000a6a <_fwalk_reent+0xe>
 8000a7a:	4638      	mov	r0, r7
 8000a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a80:	89ab      	ldrh	r3, [r5, #12]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d907      	bls.n	8000a96 <_fwalk_reent+0x3a>
 8000a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	d003      	beq.n	8000a96 <_fwalk_reent+0x3a>
 8000a8e:	4629      	mov	r1, r5
 8000a90:	4630      	mov	r0, r6
 8000a92:	47c0      	blx	r8
 8000a94:	4307      	orrs	r7, r0
 8000a96:	3568      	adds	r5, #104	; 0x68
 8000a98:	e7e9      	b.n	8000a6e <_fwalk_reent+0x12>

08000a9a <__retarget_lock_init_recursive>:
 8000a9a:	4770      	bx	lr

08000a9c <__retarget_lock_acquire_recursive>:
 8000a9c:	4770      	bx	lr

08000a9e <__retarget_lock_release_recursive>:
 8000a9e:	4770      	bx	lr

08000aa0 <_malloc_r>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	1ccd      	adds	r5, r1, #3
 8000aa4:	f025 0503 	bic.w	r5, r5, #3
 8000aa8:	3508      	adds	r5, #8
 8000aaa:	2d0c      	cmp	r5, #12
 8000aac:	bf38      	it	cc
 8000aae:	250c      	movcc	r5, #12
 8000ab0:	2d00      	cmp	r5, #0
 8000ab2:	4606      	mov	r6, r0
 8000ab4:	db01      	blt.n	8000aba <_malloc_r+0x1a>
 8000ab6:	42a9      	cmp	r1, r5
 8000ab8:	d903      	bls.n	8000ac2 <_malloc_r+0x22>
 8000aba:	230c      	movs	r3, #12
 8000abc:	6033      	str	r3, [r6, #0]
 8000abe:	2000      	movs	r0, #0
 8000ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac2:	f000 fda3 	bl	800160c <__malloc_lock>
 8000ac6:	4921      	ldr	r1, [pc, #132]	; (8000b4c <_malloc_r+0xac>)
 8000ac8:	680a      	ldr	r2, [r1, #0]
 8000aca:	4614      	mov	r4, r2
 8000acc:	b99c      	cbnz	r4, 8000af6 <_malloc_r+0x56>
 8000ace:	4f20      	ldr	r7, [pc, #128]	; (8000b50 <_malloc_r+0xb0>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b923      	cbnz	r3, 8000ade <_malloc_r+0x3e>
 8000ad4:	4621      	mov	r1, r4
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	f000 fb2a 	bl	8001130 <_sbrk_r>
 8000adc:	6038      	str	r0, [r7, #0]
 8000ade:	4629      	mov	r1, r5
 8000ae0:	4630      	mov	r0, r6
 8000ae2:	f000 fb25 	bl	8001130 <_sbrk_r>
 8000ae6:	1c43      	adds	r3, r0, #1
 8000ae8:	d123      	bne.n	8000b32 <_malloc_r+0x92>
 8000aea:	230c      	movs	r3, #12
 8000aec:	6033      	str	r3, [r6, #0]
 8000aee:	4630      	mov	r0, r6
 8000af0:	f000 fd92 	bl	8001618 <__malloc_unlock>
 8000af4:	e7e3      	b.n	8000abe <_malloc_r+0x1e>
 8000af6:	6823      	ldr	r3, [r4, #0]
 8000af8:	1b5b      	subs	r3, r3, r5
 8000afa:	d417      	bmi.n	8000b2c <_malloc_r+0x8c>
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	d903      	bls.n	8000b08 <_malloc_r+0x68>
 8000b00:	6023      	str	r3, [r4, #0]
 8000b02:	441c      	add	r4, r3
 8000b04:	6025      	str	r5, [r4, #0]
 8000b06:	e004      	b.n	8000b12 <_malloc_r+0x72>
 8000b08:	6863      	ldr	r3, [r4, #4]
 8000b0a:	42a2      	cmp	r2, r4
 8000b0c:	bf0c      	ite	eq
 8000b0e:	600b      	streq	r3, [r1, #0]
 8000b10:	6053      	strne	r3, [r2, #4]
 8000b12:	4630      	mov	r0, r6
 8000b14:	f000 fd80 	bl	8001618 <__malloc_unlock>
 8000b18:	f104 000b 	add.w	r0, r4, #11
 8000b1c:	1d23      	adds	r3, r4, #4
 8000b1e:	f020 0007 	bic.w	r0, r0, #7
 8000b22:	1ac2      	subs	r2, r0, r3
 8000b24:	d0cc      	beq.n	8000ac0 <_malloc_r+0x20>
 8000b26:	1a1b      	subs	r3, r3, r0
 8000b28:	50a3      	str	r3, [r4, r2]
 8000b2a:	e7c9      	b.n	8000ac0 <_malloc_r+0x20>
 8000b2c:	4622      	mov	r2, r4
 8000b2e:	6864      	ldr	r4, [r4, #4]
 8000b30:	e7cc      	b.n	8000acc <_malloc_r+0x2c>
 8000b32:	1cc4      	adds	r4, r0, #3
 8000b34:	f024 0403 	bic.w	r4, r4, #3
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d0e3      	beq.n	8000b04 <_malloc_r+0x64>
 8000b3c:	1a21      	subs	r1, r4, r0
 8000b3e:	4630      	mov	r0, r6
 8000b40:	f000 faf6 	bl	8001130 <_sbrk_r>
 8000b44:	3001      	adds	r0, #1
 8000b46:	d1dd      	bne.n	8000b04 <_malloc_r+0x64>
 8000b48:	e7cf      	b.n	8000aea <_malloc_r+0x4a>
 8000b4a:	bf00      	nop
 8000b4c:	2000008c 	.word	0x2000008c
 8000b50:	20000090 	.word	0x20000090

08000b54 <__sfputc_r>:
 8000b54:	6893      	ldr	r3, [r2, #8]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	b410      	push	{r4}
 8000b5c:	6093      	str	r3, [r2, #8]
 8000b5e:	da08      	bge.n	8000b72 <__sfputc_r+0x1e>
 8000b60:	6994      	ldr	r4, [r2, #24]
 8000b62:	42a3      	cmp	r3, r4
 8000b64:	db01      	blt.n	8000b6a <__sfputc_r+0x16>
 8000b66:	290a      	cmp	r1, #10
 8000b68:	d103      	bne.n	8000b72 <__sfputc_r+0x1e>
 8000b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b6e:	f000 bb33 	b.w	80011d8 <__swbuf_r>
 8000b72:	6813      	ldr	r3, [r2, #0]
 8000b74:	1c58      	adds	r0, r3, #1
 8000b76:	6010      	str	r0, [r2, #0]
 8000b78:	7019      	strb	r1, [r3, #0]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <__sfputs_r>:
 8000b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b84:	4606      	mov	r6, r0
 8000b86:	460f      	mov	r7, r1
 8000b88:	4614      	mov	r4, r2
 8000b8a:	18d5      	adds	r5, r2, r3
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	d101      	bne.n	8000b94 <__sfputs_r+0x12>
 8000b90:	2000      	movs	r0, #0
 8000b92:	e007      	b.n	8000ba4 <__sfputs_r+0x22>
 8000b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b98:	463a      	mov	r2, r7
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	f7ff ffda 	bl	8000b54 <__sfputc_r>
 8000ba0:	1c43      	adds	r3, r0, #1
 8000ba2:	d1f3      	bne.n	8000b8c <__sfputs_r+0xa>
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ba8 <_vfiprintf_r>:
 8000ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bac:	460d      	mov	r5, r1
 8000bae:	b09d      	sub	sp, #116	; 0x74
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	b118      	cbz	r0, 8000bc0 <_vfiprintf_r+0x18>
 8000bb8:	6983      	ldr	r3, [r0, #24]
 8000bba:	b90b      	cbnz	r3, 8000bc0 <_vfiprintf_r+0x18>
 8000bbc:	f7ff fed0 	bl	8000960 <__sinit>
 8000bc0:	4b89      	ldr	r3, [pc, #548]	; (8000de8 <_vfiprintf_r+0x240>)
 8000bc2:	429d      	cmp	r5, r3
 8000bc4:	d11b      	bne.n	8000bfe <_vfiprintf_r+0x56>
 8000bc6:	6875      	ldr	r5, [r6, #4]
 8000bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bca:	07d9      	lsls	r1, r3, #31
 8000bcc:	d405      	bmi.n	8000bda <_vfiprintf_r+0x32>
 8000bce:	89ab      	ldrh	r3, [r5, #12]
 8000bd0:	059a      	lsls	r2, r3, #22
 8000bd2:	d402      	bmi.n	8000bda <_vfiprintf_r+0x32>
 8000bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bd6:	f7ff ff61 	bl	8000a9c <__retarget_lock_acquire_recursive>
 8000bda:	89ab      	ldrh	r3, [r5, #12]
 8000bdc:	071b      	lsls	r3, r3, #28
 8000bde:	d501      	bpl.n	8000be4 <_vfiprintf_r+0x3c>
 8000be0:	692b      	ldr	r3, [r5, #16]
 8000be2:	b9eb      	cbnz	r3, 8000c20 <_vfiprintf_r+0x78>
 8000be4:	4629      	mov	r1, r5
 8000be6:	4630      	mov	r0, r6
 8000be8:	f000 fb5a 	bl	80012a0 <__swsetup_r>
 8000bec:	b1c0      	cbz	r0, 8000c20 <_vfiprintf_r+0x78>
 8000bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bf0:	07dc      	lsls	r4, r3, #31
 8000bf2:	d50e      	bpl.n	8000c12 <_vfiprintf_r+0x6a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	b01d      	add	sp, #116	; 0x74
 8000bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfe:	4b7b      	ldr	r3, [pc, #492]	; (8000dec <_vfiprintf_r+0x244>)
 8000c00:	429d      	cmp	r5, r3
 8000c02:	d101      	bne.n	8000c08 <_vfiprintf_r+0x60>
 8000c04:	68b5      	ldr	r5, [r6, #8]
 8000c06:	e7df      	b.n	8000bc8 <_vfiprintf_r+0x20>
 8000c08:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <_vfiprintf_r+0x248>)
 8000c0a:	429d      	cmp	r5, r3
 8000c0c:	bf08      	it	eq
 8000c0e:	68f5      	ldreq	r5, [r6, #12]
 8000c10:	e7da      	b.n	8000bc8 <_vfiprintf_r+0x20>
 8000c12:	89ab      	ldrh	r3, [r5, #12]
 8000c14:	0598      	lsls	r0, r3, #22
 8000c16:	d4ed      	bmi.n	8000bf4 <_vfiprintf_r+0x4c>
 8000c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c1a:	f7ff ff40 	bl	8000a9e <__retarget_lock_release_recursive>
 8000c1e:	e7e9      	b.n	8000bf4 <_vfiprintf_r+0x4c>
 8000c20:	2300      	movs	r3, #0
 8000c22:	9309      	str	r3, [sp, #36]	; 0x24
 8000c24:	2320      	movs	r3, #32
 8000c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c2e:	2330      	movs	r3, #48	; 0x30
 8000c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000df4 <_vfiprintf_r+0x24c>
 8000c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c38:	f04f 0901 	mov.w	r9, #1
 8000c3c:	4623      	mov	r3, r4
 8000c3e:	469a      	mov	sl, r3
 8000c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c44:	b10a      	cbz	r2, 8000c4a <_vfiprintf_r+0xa2>
 8000c46:	2a25      	cmp	r2, #37	; 0x25
 8000c48:	d1f9      	bne.n	8000c3e <_vfiprintf_r+0x96>
 8000c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c4e:	d00b      	beq.n	8000c68 <_vfiprintf_r+0xc0>
 8000c50:	465b      	mov	r3, fp
 8000c52:	4622      	mov	r2, r4
 8000c54:	4629      	mov	r1, r5
 8000c56:	4630      	mov	r0, r6
 8000c58:	f7ff ff93 	bl	8000b82 <__sfputs_r>
 8000c5c:	3001      	adds	r0, #1
 8000c5e:	f000 80aa 	beq.w	8000db6 <_vfiprintf_r+0x20e>
 8000c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c64:	445a      	add	r2, fp
 8000c66:	9209      	str	r2, [sp, #36]	; 0x24
 8000c68:	f89a 3000 	ldrb.w	r3, [sl]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80a2 	beq.w	8000db6 <_vfiprintf_r+0x20e>
 8000c72:	2300      	movs	r3, #0
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c7c:	f10a 0a01 	add.w	sl, sl, #1
 8000c80:	9304      	str	r3, [sp, #16]
 8000c82:	9307      	str	r3, [sp, #28]
 8000c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c88:	931a      	str	r3, [sp, #104]	; 0x68
 8000c8a:	4654      	mov	r4, sl
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c92:	4858      	ldr	r0, [pc, #352]	; (8000df4 <_vfiprintf_r+0x24c>)
 8000c94:	f7ff faa4 	bl	80001e0 <memchr>
 8000c98:	9a04      	ldr	r2, [sp, #16]
 8000c9a:	b9d8      	cbnz	r0, 8000cd4 <_vfiprintf_r+0x12c>
 8000c9c:	06d1      	lsls	r1, r2, #27
 8000c9e:	bf44      	itt	mi
 8000ca0:	2320      	movmi	r3, #32
 8000ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ca6:	0713      	lsls	r3, r2, #28
 8000ca8:	bf44      	itt	mi
 8000caa:	232b      	movmi	r3, #43	; 0x2b
 8000cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb6:	d015      	beq.n	8000ce4 <_vfiprintf_r+0x13c>
 8000cb8:	9a07      	ldr	r2, [sp, #28]
 8000cba:	4654      	mov	r4, sl
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f04f 0c0a 	mov.w	ip, #10
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cc8:	3b30      	subs	r3, #48	; 0x30
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d94e      	bls.n	8000d6c <_vfiprintf_r+0x1c4>
 8000cce:	b1b0      	cbz	r0, 8000cfe <_vfiprintf_r+0x156>
 8000cd0:	9207      	str	r2, [sp, #28]
 8000cd2:	e014      	b.n	8000cfe <_vfiprintf_r+0x156>
 8000cd4:	eba0 0308 	sub.w	r3, r0, r8
 8000cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	9304      	str	r3, [sp, #16]
 8000ce0:	46a2      	mov	sl, r4
 8000ce2:	e7d2      	b.n	8000c8a <_vfiprintf_r+0xe2>
 8000ce4:	9b03      	ldr	r3, [sp, #12]
 8000ce6:	1d19      	adds	r1, r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	9103      	str	r1, [sp, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bfbb      	ittet	lt
 8000cf0:	425b      	neglt	r3, r3
 8000cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8000cf6:	9307      	strge	r3, [sp, #28]
 8000cf8:	9307      	strlt	r3, [sp, #28]
 8000cfa:	bfb8      	it	lt
 8000cfc:	9204      	strlt	r2, [sp, #16]
 8000cfe:	7823      	ldrb	r3, [r4, #0]
 8000d00:	2b2e      	cmp	r3, #46	; 0x2e
 8000d02:	d10c      	bne.n	8000d1e <_vfiprintf_r+0x176>
 8000d04:	7863      	ldrb	r3, [r4, #1]
 8000d06:	2b2a      	cmp	r3, #42	; 0x2a
 8000d08:	d135      	bne.n	8000d76 <_vfiprintf_r+0x1ce>
 8000d0a:	9b03      	ldr	r3, [sp, #12]
 8000d0c:	1d1a      	adds	r2, r3, #4
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	9203      	str	r2, [sp, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bfb8      	it	lt
 8000d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d1a:	3402      	adds	r4, #2
 8000d1c:	9305      	str	r3, [sp, #20]
 8000d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000e04 <_vfiprintf_r+0x25c>
 8000d22:	7821      	ldrb	r1, [r4, #0]
 8000d24:	2203      	movs	r2, #3
 8000d26:	4650      	mov	r0, sl
 8000d28:	f7ff fa5a 	bl	80001e0 <memchr>
 8000d2c:	b140      	cbz	r0, 8000d40 <_vfiprintf_r+0x198>
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	eba0 000a 	sub.w	r0, r0, sl
 8000d34:	fa03 f000 	lsl.w	r0, r3, r0
 8000d38:	9b04      	ldr	r3, [sp, #16]
 8000d3a:	4303      	orrs	r3, r0
 8000d3c:	3401      	adds	r4, #1
 8000d3e:	9304      	str	r3, [sp, #16]
 8000d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d44:	482c      	ldr	r0, [pc, #176]	; (8000df8 <_vfiprintf_r+0x250>)
 8000d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	f7ff fa48 	bl	80001e0 <memchr>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d03f      	beq.n	8000dd4 <_vfiprintf_r+0x22c>
 8000d54:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <_vfiprintf_r+0x254>)
 8000d56:	bb1b      	cbnz	r3, 8000da0 <_vfiprintf_r+0x1f8>
 8000d58:	9b03      	ldr	r3, [sp, #12]
 8000d5a:	3307      	adds	r3, #7
 8000d5c:	f023 0307 	bic.w	r3, r3, #7
 8000d60:	3308      	adds	r3, #8
 8000d62:	9303      	str	r3, [sp, #12]
 8000d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d66:	443b      	add	r3, r7
 8000d68:	9309      	str	r3, [sp, #36]	; 0x24
 8000d6a:	e767      	b.n	8000c3c <_vfiprintf_r+0x94>
 8000d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d70:	460c      	mov	r4, r1
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7a5      	b.n	8000cc2 <_vfiprintf_r+0x11a>
 8000d76:	2300      	movs	r3, #0
 8000d78:	3401      	adds	r4, #1
 8000d7a:	9305      	str	r3, [sp, #20]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 0c0a 	mov.w	ip, #10
 8000d82:	4620      	mov	r0, r4
 8000d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d88:	3a30      	subs	r2, #48	; 0x30
 8000d8a:	2a09      	cmp	r2, #9
 8000d8c:	d903      	bls.n	8000d96 <_vfiprintf_r+0x1ee>
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0c5      	beq.n	8000d1e <_vfiprintf_r+0x176>
 8000d92:	9105      	str	r1, [sp, #20]
 8000d94:	e7c3      	b.n	8000d1e <_vfiprintf_r+0x176>
 8000d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e7f0      	b.n	8000d82 <_vfiprintf_r+0x1da>
 8000da0:	ab03      	add	r3, sp, #12
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	462a      	mov	r2, r5
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <_vfiprintf_r+0x258>)
 8000da8:	a904      	add	r1, sp, #16
 8000daa:	4630      	mov	r0, r6
 8000dac:	f3af 8000 	nop.w
 8000db0:	4607      	mov	r7, r0
 8000db2:	1c78      	adds	r0, r7, #1
 8000db4:	d1d6      	bne.n	8000d64 <_vfiprintf_r+0x1bc>
 8000db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000db8:	07d9      	lsls	r1, r3, #31
 8000dba:	d405      	bmi.n	8000dc8 <_vfiprintf_r+0x220>
 8000dbc:	89ab      	ldrh	r3, [r5, #12]
 8000dbe:	059a      	lsls	r2, r3, #22
 8000dc0:	d402      	bmi.n	8000dc8 <_vfiprintf_r+0x220>
 8000dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dc4:	f7ff fe6b 	bl	8000a9e <__retarget_lock_release_recursive>
 8000dc8:	89ab      	ldrh	r3, [r5, #12]
 8000dca:	065b      	lsls	r3, r3, #25
 8000dcc:	f53f af12 	bmi.w	8000bf4 <_vfiprintf_r+0x4c>
 8000dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dd2:	e711      	b.n	8000bf8 <_vfiprintf_r+0x50>
 8000dd4:	ab03      	add	r3, sp, #12
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	462a      	mov	r2, r5
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <_vfiprintf_r+0x258>)
 8000ddc:	a904      	add	r1, sp, #16
 8000dde:	4630      	mov	r0, r6
 8000de0:	f000 f880 	bl	8000ee4 <_printf_i>
 8000de4:	e7e4      	b.n	8000db0 <_vfiprintf_r+0x208>
 8000de6:	bf00      	nop
 8000de8:	0800177c 	.word	0x0800177c
 8000dec:	0800179c 	.word	0x0800179c
 8000df0:	0800175c 	.word	0x0800175c
 8000df4:	080017bc 	.word	0x080017bc
 8000df8:	080017c6 	.word	0x080017c6
 8000dfc:	00000000 	.word	0x00000000
 8000e00:	08000b83 	.word	0x08000b83
 8000e04:	080017c2 	.word	0x080017c2

08000e08 <_printf_common>:
 8000e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e0c:	4616      	mov	r6, r2
 8000e0e:	4699      	mov	r9, r3
 8000e10:	688a      	ldr	r2, [r1, #8]
 8000e12:	690b      	ldr	r3, [r1, #16]
 8000e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	bfb8      	it	lt
 8000e1c:	4613      	movlt	r3, r2
 8000e1e:	6033      	str	r3, [r6, #0]
 8000e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e24:	4607      	mov	r7, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	b10a      	cbz	r2, 8000e2e <_printf_common+0x26>
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	6033      	str	r3, [r6, #0]
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	0699      	lsls	r1, r3, #26
 8000e32:	bf42      	ittt	mi
 8000e34:	6833      	ldrmi	r3, [r6, #0]
 8000e36:	3302      	addmi	r3, #2
 8000e38:	6033      	strmi	r3, [r6, #0]
 8000e3a:	6825      	ldr	r5, [r4, #0]
 8000e3c:	f015 0506 	ands.w	r5, r5, #6
 8000e40:	d106      	bne.n	8000e50 <_printf_common+0x48>
 8000e42:	f104 0a19 	add.w	sl, r4, #25
 8000e46:	68e3      	ldr	r3, [r4, #12]
 8000e48:	6832      	ldr	r2, [r6, #0]
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	dc26      	bgt.n	8000e9e <_printf_common+0x96>
 8000e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e54:	1e13      	subs	r3, r2, #0
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	bf18      	it	ne
 8000e5a:	2301      	movne	r3, #1
 8000e5c:	0692      	lsls	r2, r2, #26
 8000e5e:	d42b      	bmi.n	8000eb8 <_printf_common+0xb0>
 8000e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e64:	4649      	mov	r1, r9
 8000e66:	4638      	mov	r0, r7
 8000e68:	47c0      	blx	r8
 8000e6a:	3001      	adds	r0, #1
 8000e6c:	d01e      	beq.n	8000eac <_printf_common+0xa4>
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	68e5      	ldr	r5, [r4, #12]
 8000e72:	6832      	ldr	r2, [r6, #0]
 8000e74:	f003 0306 	and.w	r3, r3, #6
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	bf08      	it	eq
 8000e7c:	1aad      	subeq	r5, r5, r2
 8000e7e:	68a3      	ldr	r3, [r4, #8]
 8000e80:	6922      	ldr	r2, [r4, #16]
 8000e82:	bf0c      	ite	eq
 8000e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e88:	2500      	movne	r5, #0
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	bfc4      	itt	gt
 8000e8e:	1a9b      	subgt	r3, r3, r2
 8000e90:	18ed      	addgt	r5, r5, r3
 8000e92:	2600      	movs	r6, #0
 8000e94:	341a      	adds	r4, #26
 8000e96:	42b5      	cmp	r5, r6
 8000e98:	d11a      	bne.n	8000ed0 <_printf_common+0xc8>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	e008      	b.n	8000eb0 <_printf_common+0xa8>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	4652      	mov	r2, sl
 8000ea2:	4649      	mov	r1, r9
 8000ea4:	4638      	mov	r0, r7
 8000ea6:	47c0      	blx	r8
 8000ea8:	3001      	adds	r0, #1
 8000eaa:	d103      	bne.n	8000eb4 <_printf_common+0xac>
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb4:	3501      	adds	r5, #1
 8000eb6:	e7c6      	b.n	8000e46 <_printf_common+0x3e>
 8000eb8:	18e1      	adds	r1, r4, r3
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	2030      	movs	r0, #48	; 0x30
 8000ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ec2:	4422      	add	r2, r4
 8000ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ecc:	3302      	adds	r3, #2
 8000ece:	e7c7      	b.n	8000e60 <_printf_common+0x58>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4622      	mov	r2, r4
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	4638      	mov	r0, r7
 8000ed8:	47c0      	blx	r8
 8000eda:	3001      	adds	r0, #1
 8000edc:	d0e6      	beq.n	8000eac <_printf_common+0xa4>
 8000ede:	3601      	adds	r6, #1
 8000ee0:	e7d9      	b.n	8000e96 <_printf_common+0x8e>
	...

08000ee4 <_printf_i>:
 8000ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee8:	460c      	mov	r4, r1
 8000eea:	4691      	mov	r9, r2
 8000eec:	7e27      	ldrb	r7, [r4, #24]
 8000eee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000ef0:	2f78      	cmp	r7, #120	; 0x78
 8000ef2:	4680      	mov	r8, r0
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000efa:	d807      	bhi.n	8000f0c <_printf_i+0x28>
 8000efc:	2f62      	cmp	r7, #98	; 0x62
 8000efe:	d80a      	bhi.n	8000f16 <_printf_i+0x32>
 8000f00:	2f00      	cmp	r7, #0
 8000f02:	f000 80d8 	beq.w	80010b6 <_printf_i+0x1d2>
 8000f06:	2f58      	cmp	r7, #88	; 0x58
 8000f08:	f000 80a3 	beq.w	8001052 <_printf_i+0x16e>
 8000f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f14:	e03a      	b.n	8000f8c <_printf_i+0xa8>
 8000f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f1a:	2b15      	cmp	r3, #21
 8000f1c:	d8f6      	bhi.n	8000f0c <_printf_i+0x28>
 8000f1e:	a001      	add	r0, pc, #4	; (adr r0, 8000f24 <_printf_i+0x40>)
 8000f20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000f24:	08000f7d 	.word	0x08000f7d
 8000f28:	08000f91 	.word	0x08000f91
 8000f2c:	08000f0d 	.word	0x08000f0d
 8000f30:	08000f0d 	.word	0x08000f0d
 8000f34:	08000f0d 	.word	0x08000f0d
 8000f38:	08000f0d 	.word	0x08000f0d
 8000f3c:	08000f91 	.word	0x08000f91
 8000f40:	08000f0d 	.word	0x08000f0d
 8000f44:	08000f0d 	.word	0x08000f0d
 8000f48:	08000f0d 	.word	0x08000f0d
 8000f4c:	08000f0d 	.word	0x08000f0d
 8000f50:	0800109d 	.word	0x0800109d
 8000f54:	08000fc1 	.word	0x08000fc1
 8000f58:	0800107f 	.word	0x0800107f
 8000f5c:	08000f0d 	.word	0x08000f0d
 8000f60:	08000f0d 	.word	0x08000f0d
 8000f64:	080010bf 	.word	0x080010bf
 8000f68:	08000f0d 	.word	0x08000f0d
 8000f6c:	08000fc1 	.word	0x08000fc1
 8000f70:	08000f0d 	.word	0x08000f0d
 8000f74:	08000f0d 	.word	0x08000f0d
 8000f78:	08001087 	.word	0x08001087
 8000f7c:	680b      	ldr	r3, [r1, #0]
 8000f7e:	1d1a      	adds	r2, r3, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	600a      	str	r2, [r1, #0]
 8000f84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0a3      	b.n	80010d8 <_printf_i+0x1f4>
 8000f90:	6825      	ldr	r5, [r4, #0]
 8000f92:	6808      	ldr	r0, [r1, #0]
 8000f94:	062e      	lsls	r6, r5, #24
 8000f96:	f100 0304 	add.w	r3, r0, #4
 8000f9a:	d50a      	bpl.n	8000fb2 <_printf_i+0xce>
 8000f9c:	6805      	ldr	r5, [r0, #0]
 8000f9e:	600b      	str	r3, [r1, #0]
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	da03      	bge.n	8000fac <_printf_i+0xc8>
 8000fa4:	232d      	movs	r3, #45	; 0x2d
 8000fa6:	426d      	negs	r5, r5
 8000fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fac:	485e      	ldr	r0, [pc, #376]	; (8001128 <_printf_i+0x244>)
 8000fae:	230a      	movs	r3, #10
 8000fb0:	e019      	b.n	8000fe6 <_printf_i+0x102>
 8000fb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000fb6:	6805      	ldr	r5, [r0, #0]
 8000fb8:	600b      	str	r3, [r1, #0]
 8000fba:	bf18      	it	ne
 8000fbc:	b22d      	sxthne	r5, r5
 8000fbe:	e7ef      	b.n	8000fa0 <_printf_i+0xbc>
 8000fc0:	680b      	ldr	r3, [r1, #0]
 8000fc2:	6825      	ldr	r5, [r4, #0]
 8000fc4:	1d18      	adds	r0, r3, #4
 8000fc6:	6008      	str	r0, [r1, #0]
 8000fc8:	0628      	lsls	r0, r5, #24
 8000fca:	d501      	bpl.n	8000fd0 <_printf_i+0xec>
 8000fcc:	681d      	ldr	r5, [r3, #0]
 8000fce:	e002      	b.n	8000fd6 <_printf_i+0xf2>
 8000fd0:	0669      	lsls	r1, r5, #25
 8000fd2:	d5fb      	bpl.n	8000fcc <_printf_i+0xe8>
 8000fd4:	881d      	ldrh	r5, [r3, #0]
 8000fd6:	4854      	ldr	r0, [pc, #336]	; (8001128 <_printf_i+0x244>)
 8000fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8000fda:	bf0c      	ite	eq
 8000fdc:	2308      	moveq	r3, #8
 8000fde:	230a      	movne	r3, #10
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fe6:	6866      	ldr	r6, [r4, #4]
 8000fe8:	60a6      	str	r6, [r4, #8]
 8000fea:	2e00      	cmp	r6, #0
 8000fec:	bfa2      	ittt	ge
 8000fee:	6821      	ldrge	r1, [r4, #0]
 8000ff0:	f021 0104 	bicge.w	r1, r1, #4
 8000ff4:	6021      	strge	r1, [r4, #0]
 8000ff6:	b90d      	cbnz	r5, 8000ffc <_printf_i+0x118>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d04d      	beq.n	8001098 <_printf_i+0x1b4>
 8000ffc:	4616      	mov	r6, r2
 8000ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 8001002:	fb03 5711 	mls	r7, r3, r1, r5
 8001006:	5dc7      	ldrb	r7, [r0, r7]
 8001008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800100c:	462f      	mov	r7, r5
 800100e:	42bb      	cmp	r3, r7
 8001010:	460d      	mov	r5, r1
 8001012:	d9f4      	bls.n	8000ffe <_printf_i+0x11a>
 8001014:	2b08      	cmp	r3, #8
 8001016:	d10b      	bne.n	8001030 <_printf_i+0x14c>
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	07df      	lsls	r7, r3, #31
 800101c:	d508      	bpl.n	8001030 <_printf_i+0x14c>
 800101e:	6923      	ldr	r3, [r4, #16]
 8001020:	6861      	ldr	r1, [r4, #4]
 8001022:	4299      	cmp	r1, r3
 8001024:	bfde      	ittt	le
 8001026:	2330      	movle	r3, #48	; 0x30
 8001028:	f806 3c01 	strble.w	r3, [r6, #-1]
 800102c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001030:	1b92      	subs	r2, r2, r6
 8001032:	6122      	str	r2, [r4, #16]
 8001034:	f8cd a000 	str.w	sl, [sp]
 8001038:	464b      	mov	r3, r9
 800103a:	aa03      	add	r2, sp, #12
 800103c:	4621      	mov	r1, r4
 800103e:	4640      	mov	r0, r8
 8001040:	f7ff fee2 	bl	8000e08 <_printf_common>
 8001044:	3001      	adds	r0, #1
 8001046:	d14c      	bne.n	80010e2 <_printf_i+0x1fe>
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	b004      	add	sp, #16
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	4835      	ldr	r0, [pc, #212]	; (8001128 <_printf_i+0x244>)
 8001054:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	680e      	ldr	r6, [r1, #0]
 800105c:	061f      	lsls	r7, r3, #24
 800105e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001062:	600e      	str	r6, [r1, #0]
 8001064:	d514      	bpl.n	8001090 <_printf_i+0x1ac>
 8001066:	07d9      	lsls	r1, r3, #31
 8001068:	bf44      	itt	mi
 800106a:	f043 0320 	orrmi.w	r3, r3, #32
 800106e:	6023      	strmi	r3, [r4, #0]
 8001070:	b91d      	cbnz	r5, 800107a <_printf_i+0x196>
 8001072:	6823      	ldr	r3, [r4, #0]
 8001074:	f023 0320 	bic.w	r3, r3, #32
 8001078:	6023      	str	r3, [r4, #0]
 800107a:	2310      	movs	r3, #16
 800107c:	e7b0      	b.n	8000fe0 <_printf_i+0xfc>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	6023      	str	r3, [r4, #0]
 8001086:	2378      	movs	r3, #120	; 0x78
 8001088:	4828      	ldr	r0, [pc, #160]	; (800112c <_printf_i+0x248>)
 800108a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800108e:	e7e3      	b.n	8001058 <_printf_i+0x174>
 8001090:	065e      	lsls	r6, r3, #25
 8001092:	bf48      	it	mi
 8001094:	b2ad      	uxthmi	r5, r5
 8001096:	e7e6      	b.n	8001066 <_printf_i+0x182>
 8001098:	4616      	mov	r6, r2
 800109a:	e7bb      	b.n	8001014 <_printf_i+0x130>
 800109c:	680b      	ldr	r3, [r1, #0]
 800109e:	6826      	ldr	r6, [r4, #0]
 80010a0:	6960      	ldr	r0, [r4, #20]
 80010a2:	1d1d      	adds	r5, r3, #4
 80010a4:	600d      	str	r5, [r1, #0]
 80010a6:	0635      	lsls	r5, r6, #24
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	d501      	bpl.n	80010b0 <_printf_i+0x1cc>
 80010ac:	6018      	str	r0, [r3, #0]
 80010ae:	e002      	b.n	80010b6 <_printf_i+0x1d2>
 80010b0:	0671      	lsls	r1, r6, #25
 80010b2:	d5fb      	bpl.n	80010ac <_printf_i+0x1c8>
 80010b4:	8018      	strh	r0, [r3, #0]
 80010b6:	2300      	movs	r3, #0
 80010b8:	6123      	str	r3, [r4, #16]
 80010ba:	4616      	mov	r6, r2
 80010bc:	e7ba      	b.n	8001034 <_printf_i+0x150>
 80010be:	680b      	ldr	r3, [r1, #0]
 80010c0:	1d1a      	adds	r2, r3, #4
 80010c2:	600a      	str	r2, [r1, #0]
 80010c4:	681e      	ldr	r6, [r3, #0]
 80010c6:	6862      	ldr	r2, [r4, #4]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4630      	mov	r0, r6
 80010cc:	f7ff f888 	bl	80001e0 <memchr>
 80010d0:	b108      	cbz	r0, 80010d6 <_printf_i+0x1f2>
 80010d2:	1b80      	subs	r0, r0, r6
 80010d4:	6060      	str	r0, [r4, #4]
 80010d6:	6863      	ldr	r3, [r4, #4]
 80010d8:	6123      	str	r3, [r4, #16]
 80010da:	2300      	movs	r3, #0
 80010dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010e0:	e7a8      	b.n	8001034 <_printf_i+0x150>
 80010e2:	6923      	ldr	r3, [r4, #16]
 80010e4:	4632      	mov	r2, r6
 80010e6:	4649      	mov	r1, r9
 80010e8:	4640      	mov	r0, r8
 80010ea:	47d0      	blx	sl
 80010ec:	3001      	adds	r0, #1
 80010ee:	d0ab      	beq.n	8001048 <_printf_i+0x164>
 80010f0:	6823      	ldr	r3, [r4, #0]
 80010f2:	079b      	lsls	r3, r3, #30
 80010f4:	d413      	bmi.n	800111e <_printf_i+0x23a>
 80010f6:	68e0      	ldr	r0, [r4, #12]
 80010f8:	9b03      	ldr	r3, [sp, #12]
 80010fa:	4298      	cmp	r0, r3
 80010fc:	bfb8      	it	lt
 80010fe:	4618      	movlt	r0, r3
 8001100:	e7a4      	b.n	800104c <_printf_i+0x168>
 8001102:	2301      	movs	r3, #1
 8001104:	4632      	mov	r2, r6
 8001106:	4649      	mov	r1, r9
 8001108:	4640      	mov	r0, r8
 800110a:	47d0      	blx	sl
 800110c:	3001      	adds	r0, #1
 800110e:	d09b      	beq.n	8001048 <_printf_i+0x164>
 8001110:	3501      	adds	r5, #1
 8001112:	68e3      	ldr	r3, [r4, #12]
 8001114:	9903      	ldr	r1, [sp, #12]
 8001116:	1a5b      	subs	r3, r3, r1
 8001118:	42ab      	cmp	r3, r5
 800111a:	dcf2      	bgt.n	8001102 <_printf_i+0x21e>
 800111c:	e7eb      	b.n	80010f6 <_printf_i+0x212>
 800111e:	2500      	movs	r5, #0
 8001120:	f104 0619 	add.w	r6, r4, #25
 8001124:	e7f5      	b.n	8001112 <_printf_i+0x22e>
 8001126:	bf00      	nop
 8001128:	080017cd 	.word	0x080017cd
 800112c:	080017de 	.word	0x080017de

08001130 <_sbrk_r>:
 8001130:	b538      	push	{r3, r4, r5, lr}
 8001132:	4d06      	ldr	r5, [pc, #24]	; (800114c <_sbrk_r+0x1c>)
 8001134:	2300      	movs	r3, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	602b      	str	r3, [r5, #0]
 800113c:	f7ff fb0e 	bl	800075c <_sbrk>
 8001140:	1c43      	adds	r3, r0, #1
 8001142:	d102      	bne.n	800114a <_sbrk_r+0x1a>
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	b103      	cbz	r3, 800114a <_sbrk_r+0x1a>
 8001148:	6023      	str	r3, [r4, #0]
 800114a:	bd38      	pop	{r3, r4, r5, pc}
 800114c:	200000a0 	.word	0x200000a0

08001150 <__sread>:
 8001150:	b510      	push	{r4, lr}
 8001152:	460c      	mov	r4, r1
 8001154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001158:	f000 fab4 	bl	80016c4 <_read_r>
 800115c:	2800      	cmp	r0, #0
 800115e:	bfab      	itete	ge
 8001160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001162:	89a3      	ldrhlt	r3, [r4, #12]
 8001164:	181b      	addge	r3, r3, r0
 8001166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800116a:	bfac      	ite	ge
 800116c:	6563      	strge	r3, [r4, #84]	; 0x54
 800116e:	81a3      	strhlt	r3, [r4, #12]
 8001170:	bd10      	pop	{r4, pc}

08001172 <__swrite>:
 8001172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001176:	461f      	mov	r7, r3
 8001178:	898b      	ldrh	r3, [r1, #12]
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	4605      	mov	r5, r0
 800117e:	460c      	mov	r4, r1
 8001180:	4616      	mov	r6, r2
 8001182:	d505      	bpl.n	8001190 <__swrite+0x1e>
 8001184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001188:	2302      	movs	r3, #2
 800118a:	2200      	movs	r2, #0
 800118c:	f000 f9c8 	bl	8001520 <_lseek_r>
 8001190:	89a3      	ldrh	r3, [r4, #12]
 8001192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800119a:	81a3      	strh	r3, [r4, #12]
 800119c:	4632      	mov	r2, r6
 800119e:	463b      	mov	r3, r7
 80011a0:	4628      	mov	r0, r5
 80011a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011a6:	f000 b869 	b.w	800127c <_write_r>

080011aa <__sseek>:
 80011aa:	b510      	push	{r4, lr}
 80011ac:	460c      	mov	r4, r1
 80011ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b2:	f000 f9b5 	bl	8001520 <_lseek_r>
 80011b6:	1c43      	adds	r3, r0, #1
 80011b8:	89a3      	ldrh	r3, [r4, #12]
 80011ba:	bf15      	itete	ne
 80011bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80011be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011c6:	81a3      	strheq	r3, [r4, #12]
 80011c8:	bf18      	it	ne
 80011ca:	81a3      	strhne	r3, [r4, #12]
 80011cc:	bd10      	pop	{r4, pc}

080011ce <__sclose>:
 80011ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d2:	f000 b8d3 	b.w	800137c <_close_r>
	...

080011d8 <__swbuf_r>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	460e      	mov	r6, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	4605      	mov	r5, r0
 80011e0:	b118      	cbz	r0, 80011ea <__swbuf_r+0x12>
 80011e2:	6983      	ldr	r3, [r0, #24]
 80011e4:	b90b      	cbnz	r3, 80011ea <__swbuf_r+0x12>
 80011e6:	f7ff fbbb 	bl	8000960 <__sinit>
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <__swbuf_r+0x98>)
 80011ec:	429c      	cmp	r4, r3
 80011ee:	d12b      	bne.n	8001248 <__swbuf_r+0x70>
 80011f0:	686c      	ldr	r4, [r5, #4]
 80011f2:	69a3      	ldr	r3, [r4, #24]
 80011f4:	60a3      	str	r3, [r4, #8]
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	071a      	lsls	r2, r3, #28
 80011fa:	d52f      	bpl.n	800125c <__swbuf_r+0x84>
 80011fc:	6923      	ldr	r3, [r4, #16]
 80011fe:	b36b      	cbz	r3, 800125c <__swbuf_r+0x84>
 8001200:	6923      	ldr	r3, [r4, #16]
 8001202:	6820      	ldr	r0, [r4, #0]
 8001204:	1ac0      	subs	r0, r0, r3
 8001206:	6963      	ldr	r3, [r4, #20]
 8001208:	b2f6      	uxtb	r6, r6
 800120a:	4283      	cmp	r3, r0
 800120c:	4637      	mov	r7, r6
 800120e:	dc04      	bgt.n	800121a <__swbuf_r+0x42>
 8001210:	4621      	mov	r1, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f000 f948 	bl	80014a8 <_fflush_r>
 8001218:	bb30      	cbnz	r0, 8001268 <__swbuf_r+0x90>
 800121a:	68a3      	ldr	r3, [r4, #8]
 800121c:	3b01      	subs	r3, #1
 800121e:	60a3      	str	r3, [r4, #8]
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	6022      	str	r2, [r4, #0]
 8001226:	701e      	strb	r6, [r3, #0]
 8001228:	6963      	ldr	r3, [r4, #20]
 800122a:	3001      	adds	r0, #1
 800122c:	4283      	cmp	r3, r0
 800122e:	d004      	beq.n	800123a <__swbuf_r+0x62>
 8001230:	89a3      	ldrh	r3, [r4, #12]
 8001232:	07db      	lsls	r3, r3, #31
 8001234:	d506      	bpl.n	8001244 <__swbuf_r+0x6c>
 8001236:	2e0a      	cmp	r6, #10
 8001238:	d104      	bne.n	8001244 <__swbuf_r+0x6c>
 800123a:	4621      	mov	r1, r4
 800123c:	4628      	mov	r0, r5
 800123e:	f000 f933 	bl	80014a8 <_fflush_r>
 8001242:	b988      	cbnz	r0, 8001268 <__swbuf_r+0x90>
 8001244:	4638      	mov	r0, r7
 8001246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <__swbuf_r+0x9c>)
 800124a:	429c      	cmp	r4, r3
 800124c:	d101      	bne.n	8001252 <__swbuf_r+0x7a>
 800124e:	68ac      	ldr	r4, [r5, #8]
 8001250:	e7cf      	b.n	80011f2 <__swbuf_r+0x1a>
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <__swbuf_r+0xa0>)
 8001254:	429c      	cmp	r4, r3
 8001256:	bf08      	it	eq
 8001258:	68ec      	ldreq	r4, [r5, #12]
 800125a:	e7ca      	b.n	80011f2 <__swbuf_r+0x1a>
 800125c:	4621      	mov	r1, r4
 800125e:	4628      	mov	r0, r5
 8001260:	f000 f81e 	bl	80012a0 <__swsetup_r>
 8001264:	2800      	cmp	r0, #0
 8001266:	d0cb      	beq.n	8001200 <__swbuf_r+0x28>
 8001268:	f04f 37ff 	mov.w	r7, #4294967295
 800126c:	e7ea      	b.n	8001244 <__swbuf_r+0x6c>
 800126e:	bf00      	nop
 8001270:	0800177c 	.word	0x0800177c
 8001274:	0800179c 	.word	0x0800179c
 8001278:	0800175c 	.word	0x0800175c

0800127c <_write_r>:
 800127c:	b538      	push	{r3, r4, r5, lr}
 800127e:	4d07      	ldr	r5, [pc, #28]	; (800129c <_write_r+0x20>)
 8001280:	4604      	mov	r4, r0
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	2200      	movs	r2, #0
 8001288:	602a      	str	r2, [r5, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	f7ff f81f 	bl	80002ce <_write>
 8001290:	1c43      	adds	r3, r0, #1
 8001292:	d102      	bne.n	800129a <_write_r+0x1e>
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	b103      	cbz	r3, 800129a <_write_r+0x1e>
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	200000a0 	.word	0x200000a0

080012a0 <__swsetup_r>:
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <__swsetup_r+0xcc>)
 80012a2:	b570      	push	{r4, r5, r6, lr}
 80012a4:	681d      	ldr	r5, [r3, #0]
 80012a6:	4606      	mov	r6, r0
 80012a8:	460c      	mov	r4, r1
 80012aa:	b125      	cbz	r5, 80012b6 <__swsetup_r+0x16>
 80012ac:	69ab      	ldr	r3, [r5, #24]
 80012ae:	b913      	cbnz	r3, 80012b6 <__swsetup_r+0x16>
 80012b0:	4628      	mov	r0, r5
 80012b2:	f7ff fb55 	bl	8000960 <__sinit>
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <__swsetup_r+0xd0>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d10f      	bne.n	80012dc <__swsetup_r+0x3c>
 80012bc:	686c      	ldr	r4, [r5, #4]
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012c4:	0719      	lsls	r1, r3, #28
 80012c6:	d42c      	bmi.n	8001322 <__swsetup_r+0x82>
 80012c8:	06dd      	lsls	r5, r3, #27
 80012ca:	d411      	bmi.n	80012f0 <__swsetup_r+0x50>
 80012cc:	2309      	movs	r3, #9
 80012ce:	6033      	str	r3, [r6, #0]
 80012d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	f04f 30ff 	mov.w	r0, #4294967295
 80012da:	e03e      	b.n	800135a <__swsetup_r+0xba>
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <__swsetup_r+0xd4>)
 80012de:	429c      	cmp	r4, r3
 80012e0:	d101      	bne.n	80012e6 <__swsetup_r+0x46>
 80012e2:	68ac      	ldr	r4, [r5, #8]
 80012e4:	e7eb      	b.n	80012be <__swsetup_r+0x1e>
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <__swsetup_r+0xd8>)
 80012e8:	429c      	cmp	r4, r3
 80012ea:	bf08      	it	eq
 80012ec:	68ec      	ldreq	r4, [r5, #12]
 80012ee:	e7e6      	b.n	80012be <__swsetup_r+0x1e>
 80012f0:	0758      	lsls	r0, r3, #29
 80012f2:	d512      	bpl.n	800131a <__swsetup_r+0x7a>
 80012f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f6:	b141      	cbz	r1, 800130a <__swsetup_r+0x6a>
 80012f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012fc:	4299      	cmp	r1, r3
 80012fe:	d002      	beq.n	8001306 <__swsetup_r+0x66>
 8001300:	4630      	mov	r0, r6
 8001302:	f000 f98f 	bl	8001624 <_free_r>
 8001306:	2300      	movs	r3, #0
 8001308:	6363      	str	r3, [r4, #52]	; 0x34
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001310:	81a3      	strh	r3, [r4, #12]
 8001312:	2300      	movs	r3, #0
 8001314:	6063      	str	r3, [r4, #4]
 8001316:	6923      	ldr	r3, [r4, #16]
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	6923      	ldr	r3, [r4, #16]
 8001324:	b94b      	cbnz	r3, 800133a <__swsetup_r+0x9a>
 8001326:	89a3      	ldrh	r3, [r4, #12]
 8001328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800132c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001330:	d003      	beq.n	800133a <__swsetup_r+0x9a>
 8001332:	4621      	mov	r1, r4
 8001334:	4630      	mov	r0, r6
 8001336:	f000 f929 	bl	800158c <__smakebuf_r>
 800133a:	89a0      	ldrh	r0, [r4, #12]
 800133c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001340:	f010 0301 	ands.w	r3, r0, #1
 8001344:	d00a      	beq.n	800135c <__swsetup_r+0xbc>
 8001346:	2300      	movs	r3, #0
 8001348:	60a3      	str	r3, [r4, #8]
 800134a:	6963      	ldr	r3, [r4, #20]
 800134c:	425b      	negs	r3, r3
 800134e:	61a3      	str	r3, [r4, #24]
 8001350:	6923      	ldr	r3, [r4, #16]
 8001352:	b943      	cbnz	r3, 8001366 <__swsetup_r+0xc6>
 8001354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001358:	d1ba      	bne.n	80012d0 <__swsetup_r+0x30>
 800135a:	bd70      	pop	{r4, r5, r6, pc}
 800135c:	0781      	lsls	r1, r0, #30
 800135e:	bf58      	it	pl
 8001360:	6963      	ldrpl	r3, [r4, #20]
 8001362:	60a3      	str	r3, [r4, #8]
 8001364:	e7f4      	b.n	8001350 <__swsetup_r+0xb0>
 8001366:	2000      	movs	r0, #0
 8001368:	e7f7      	b.n	800135a <__swsetup_r+0xba>
 800136a:	bf00      	nop
 800136c:	20000000 	.word	0x20000000
 8001370:	0800177c 	.word	0x0800177c
 8001374:	0800179c 	.word	0x0800179c
 8001378:	0800175c 	.word	0x0800175c

0800137c <_close_r>:
 800137c:	b538      	push	{r3, r4, r5, lr}
 800137e:	4d06      	ldr	r5, [pc, #24]	; (8001398 <_close_r+0x1c>)
 8001380:	2300      	movs	r3, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	602b      	str	r3, [r5, #0]
 8001388:	f7ff f9b3 	bl	80006f2 <_close>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	d102      	bne.n	8001396 <_close_r+0x1a>
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	b103      	cbz	r3, 8001396 <_close_r+0x1a>
 8001394:	6023      	str	r3, [r4, #0]
 8001396:	bd38      	pop	{r3, r4, r5, pc}
 8001398:	200000a0 	.word	0x200000a0

0800139c <__sflush_r>:
 800139c:	898a      	ldrh	r2, [r1, #12]
 800139e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a2:	4605      	mov	r5, r0
 80013a4:	0710      	lsls	r0, r2, #28
 80013a6:	460c      	mov	r4, r1
 80013a8:	d458      	bmi.n	800145c <__sflush_r+0xc0>
 80013aa:	684b      	ldr	r3, [r1, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dc05      	bgt.n	80013bc <__sflush_r+0x20>
 80013b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	dc02      	bgt.n	80013bc <__sflush_r+0x20>
 80013b6:	2000      	movs	r0, #0
 80013b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013be:	2e00      	cmp	r6, #0
 80013c0:	d0f9      	beq.n	80013b6 <__sflush_r+0x1a>
 80013c2:	2300      	movs	r3, #0
 80013c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013c8:	682f      	ldr	r7, [r5, #0]
 80013ca:	602b      	str	r3, [r5, #0]
 80013cc:	d032      	beq.n	8001434 <__sflush_r+0x98>
 80013ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	075a      	lsls	r2, r3, #29
 80013d4:	d505      	bpl.n	80013e2 <__sflush_r+0x46>
 80013d6:	6863      	ldr	r3, [r4, #4]
 80013d8:	1ac0      	subs	r0, r0, r3
 80013da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013dc:	b10b      	cbz	r3, 80013e2 <__sflush_r+0x46>
 80013de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013e0:	1ac0      	subs	r0, r0, r3
 80013e2:	2300      	movs	r3, #0
 80013e4:	4602      	mov	r2, r0
 80013e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013e8:	6a21      	ldr	r1, [r4, #32]
 80013ea:	4628      	mov	r0, r5
 80013ec:	47b0      	blx	r6
 80013ee:	1c43      	adds	r3, r0, #1
 80013f0:	89a3      	ldrh	r3, [r4, #12]
 80013f2:	d106      	bne.n	8001402 <__sflush_r+0x66>
 80013f4:	6829      	ldr	r1, [r5, #0]
 80013f6:	291d      	cmp	r1, #29
 80013f8:	d82c      	bhi.n	8001454 <__sflush_r+0xb8>
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <__sflush_r+0x108>)
 80013fc:	40ca      	lsrs	r2, r1
 80013fe:	07d6      	lsls	r6, r2, #31
 8001400:	d528      	bpl.n	8001454 <__sflush_r+0xb8>
 8001402:	2200      	movs	r2, #0
 8001404:	6062      	str	r2, [r4, #4]
 8001406:	04d9      	lsls	r1, r3, #19
 8001408:	6922      	ldr	r2, [r4, #16]
 800140a:	6022      	str	r2, [r4, #0]
 800140c:	d504      	bpl.n	8001418 <__sflush_r+0x7c>
 800140e:	1c42      	adds	r2, r0, #1
 8001410:	d101      	bne.n	8001416 <__sflush_r+0x7a>
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	b903      	cbnz	r3, 8001418 <__sflush_r+0x7c>
 8001416:	6560      	str	r0, [r4, #84]	; 0x54
 8001418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800141a:	602f      	str	r7, [r5, #0]
 800141c:	2900      	cmp	r1, #0
 800141e:	d0ca      	beq.n	80013b6 <__sflush_r+0x1a>
 8001420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001424:	4299      	cmp	r1, r3
 8001426:	d002      	beq.n	800142e <__sflush_r+0x92>
 8001428:	4628      	mov	r0, r5
 800142a:	f000 f8fb 	bl	8001624 <_free_r>
 800142e:	2000      	movs	r0, #0
 8001430:	6360      	str	r0, [r4, #52]	; 0x34
 8001432:	e7c1      	b.n	80013b8 <__sflush_r+0x1c>
 8001434:	6a21      	ldr	r1, [r4, #32]
 8001436:	2301      	movs	r3, #1
 8001438:	4628      	mov	r0, r5
 800143a:	47b0      	blx	r6
 800143c:	1c41      	adds	r1, r0, #1
 800143e:	d1c7      	bne.n	80013d0 <__sflush_r+0x34>
 8001440:	682b      	ldr	r3, [r5, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0c4      	beq.n	80013d0 <__sflush_r+0x34>
 8001446:	2b1d      	cmp	r3, #29
 8001448:	d001      	beq.n	800144e <__sflush_r+0xb2>
 800144a:	2b16      	cmp	r3, #22
 800144c:	d101      	bne.n	8001452 <__sflush_r+0xb6>
 800144e:	602f      	str	r7, [r5, #0]
 8001450:	e7b1      	b.n	80013b6 <__sflush_r+0x1a>
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001458:	81a3      	strh	r3, [r4, #12]
 800145a:	e7ad      	b.n	80013b8 <__sflush_r+0x1c>
 800145c:	690f      	ldr	r7, [r1, #16]
 800145e:	2f00      	cmp	r7, #0
 8001460:	d0a9      	beq.n	80013b6 <__sflush_r+0x1a>
 8001462:	0793      	lsls	r3, r2, #30
 8001464:	680e      	ldr	r6, [r1, #0]
 8001466:	bf08      	it	eq
 8001468:	694b      	ldreq	r3, [r1, #20]
 800146a:	600f      	str	r7, [r1, #0]
 800146c:	bf18      	it	ne
 800146e:	2300      	movne	r3, #0
 8001470:	eba6 0807 	sub.w	r8, r6, r7
 8001474:	608b      	str	r3, [r1, #8]
 8001476:	f1b8 0f00 	cmp.w	r8, #0
 800147a:	dd9c      	ble.n	80013b6 <__sflush_r+0x1a>
 800147c:	6a21      	ldr	r1, [r4, #32]
 800147e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001480:	4643      	mov	r3, r8
 8001482:	463a      	mov	r2, r7
 8001484:	4628      	mov	r0, r5
 8001486:	47b0      	blx	r6
 8001488:	2800      	cmp	r0, #0
 800148a:	dc06      	bgt.n	800149a <__sflush_r+0xfe>
 800148c:	89a3      	ldrh	r3, [r4, #12]
 800148e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001492:	81a3      	strh	r3, [r4, #12]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	e78e      	b.n	80013b8 <__sflush_r+0x1c>
 800149a:	4407      	add	r7, r0
 800149c:	eba8 0800 	sub.w	r8, r8, r0
 80014a0:	e7e9      	b.n	8001476 <__sflush_r+0xda>
 80014a2:	bf00      	nop
 80014a4:	20400001 	.word	0x20400001

080014a8 <_fflush_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	690b      	ldr	r3, [r1, #16]
 80014ac:	4605      	mov	r5, r0
 80014ae:	460c      	mov	r4, r1
 80014b0:	b913      	cbnz	r3, 80014b8 <_fflush_r+0x10>
 80014b2:	2500      	movs	r5, #0
 80014b4:	4628      	mov	r0, r5
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
 80014b8:	b118      	cbz	r0, 80014c2 <_fflush_r+0x1a>
 80014ba:	6983      	ldr	r3, [r0, #24]
 80014bc:	b90b      	cbnz	r3, 80014c2 <_fflush_r+0x1a>
 80014be:	f7ff fa4f 	bl	8000960 <__sinit>
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <_fflush_r+0x6c>)
 80014c4:	429c      	cmp	r4, r3
 80014c6:	d11b      	bne.n	8001500 <_fflush_r+0x58>
 80014c8:	686c      	ldr	r4, [r5, #4]
 80014ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0ef      	beq.n	80014b2 <_fflush_r+0xa>
 80014d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014d4:	07d0      	lsls	r0, r2, #31
 80014d6:	d404      	bmi.n	80014e2 <_fflush_r+0x3a>
 80014d8:	0599      	lsls	r1, r3, #22
 80014da:	d402      	bmi.n	80014e2 <_fflush_r+0x3a>
 80014dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014de:	f7ff fadd 	bl	8000a9c <__retarget_lock_acquire_recursive>
 80014e2:	4628      	mov	r0, r5
 80014e4:	4621      	mov	r1, r4
 80014e6:	f7ff ff59 	bl	800139c <__sflush_r>
 80014ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014ec:	07da      	lsls	r2, r3, #31
 80014ee:	4605      	mov	r5, r0
 80014f0:	d4e0      	bmi.n	80014b4 <_fflush_r+0xc>
 80014f2:	89a3      	ldrh	r3, [r4, #12]
 80014f4:	059b      	lsls	r3, r3, #22
 80014f6:	d4dd      	bmi.n	80014b4 <_fflush_r+0xc>
 80014f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014fa:	f7ff fad0 	bl	8000a9e <__retarget_lock_release_recursive>
 80014fe:	e7d9      	b.n	80014b4 <_fflush_r+0xc>
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <_fflush_r+0x70>)
 8001502:	429c      	cmp	r4, r3
 8001504:	d101      	bne.n	800150a <_fflush_r+0x62>
 8001506:	68ac      	ldr	r4, [r5, #8]
 8001508:	e7df      	b.n	80014ca <_fflush_r+0x22>
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <_fflush_r+0x74>)
 800150c:	429c      	cmp	r4, r3
 800150e:	bf08      	it	eq
 8001510:	68ec      	ldreq	r4, [r5, #12]
 8001512:	e7da      	b.n	80014ca <_fflush_r+0x22>
 8001514:	0800177c 	.word	0x0800177c
 8001518:	0800179c 	.word	0x0800179c
 800151c:	0800175c 	.word	0x0800175c

08001520 <_lseek_r>:
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4d07      	ldr	r5, [pc, #28]	; (8001540 <_lseek_r+0x20>)
 8001524:	4604      	mov	r4, r0
 8001526:	4608      	mov	r0, r1
 8001528:	4611      	mov	r1, r2
 800152a:	2200      	movs	r2, #0
 800152c:	602a      	str	r2, [r5, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	f7ff f906 	bl	8000740 <_lseek>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_lseek_r+0x1e>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_lseek_r+0x1e>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	200000a0 	.word	0x200000a0

08001544 <__swhatbuf_r>:
 8001544:	b570      	push	{r4, r5, r6, lr}
 8001546:	460e      	mov	r6, r1
 8001548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800154c:	2900      	cmp	r1, #0
 800154e:	b096      	sub	sp, #88	; 0x58
 8001550:	4614      	mov	r4, r2
 8001552:	461d      	mov	r5, r3
 8001554:	da07      	bge.n	8001566 <__swhatbuf_r+0x22>
 8001556:	2300      	movs	r3, #0
 8001558:	602b      	str	r3, [r5, #0]
 800155a:	89b3      	ldrh	r3, [r6, #12]
 800155c:	061a      	lsls	r2, r3, #24
 800155e:	d410      	bmi.n	8001582 <__swhatbuf_r+0x3e>
 8001560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001564:	e00e      	b.n	8001584 <__swhatbuf_r+0x40>
 8001566:	466a      	mov	r2, sp
 8001568:	f000 f8be 	bl	80016e8 <_fstat_r>
 800156c:	2800      	cmp	r0, #0
 800156e:	dbf2      	blt.n	8001556 <__swhatbuf_r+0x12>
 8001570:	9a01      	ldr	r2, [sp, #4]
 8001572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800157a:	425a      	negs	r2, r3
 800157c:	415a      	adcs	r2, r3
 800157e:	602a      	str	r2, [r5, #0]
 8001580:	e7ee      	b.n	8001560 <__swhatbuf_r+0x1c>
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	2000      	movs	r0, #0
 8001586:	6023      	str	r3, [r4, #0]
 8001588:	b016      	add	sp, #88	; 0x58
 800158a:	bd70      	pop	{r4, r5, r6, pc}

0800158c <__smakebuf_r>:
 800158c:	898b      	ldrh	r3, [r1, #12]
 800158e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001590:	079d      	lsls	r5, r3, #30
 8001592:	4606      	mov	r6, r0
 8001594:	460c      	mov	r4, r1
 8001596:	d507      	bpl.n	80015a8 <__smakebuf_r+0x1c>
 8001598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	6123      	str	r3, [r4, #16]
 80015a0:	2301      	movs	r3, #1
 80015a2:	6163      	str	r3, [r4, #20]
 80015a4:	b002      	add	sp, #8
 80015a6:	bd70      	pop	{r4, r5, r6, pc}
 80015a8:	ab01      	add	r3, sp, #4
 80015aa:	466a      	mov	r2, sp
 80015ac:	f7ff ffca 	bl	8001544 <__swhatbuf_r>
 80015b0:	9900      	ldr	r1, [sp, #0]
 80015b2:	4605      	mov	r5, r0
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff fa73 	bl	8000aa0 <_malloc_r>
 80015ba:	b948      	cbnz	r0, 80015d0 <__smakebuf_r+0x44>
 80015bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015c0:	059a      	lsls	r2, r3, #22
 80015c2:	d4ef      	bmi.n	80015a4 <__smakebuf_r+0x18>
 80015c4:	f023 0303 	bic.w	r3, r3, #3
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	81a3      	strh	r3, [r4, #12]
 80015ce:	e7e3      	b.n	8001598 <__smakebuf_r+0xc>
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <__smakebuf_r+0x7c>)
 80015d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80015d4:	89a3      	ldrh	r3, [r4, #12]
 80015d6:	6020      	str	r0, [r4, #0]
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	9b00      	ldr	r3, [sp, #0]
 80015e0:	6163      	str	r3, [r4, #20]
 80015e2:	9b01      	ldr	r3, [sp, #4]
 80015e4:	6120      	str	r0, [r4, #16]
 80015e6:	b15b      	cbz	r3, 8001600 <__smakebuf_r+0x74>
 80015e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ec:	4630      	mov	r0, r6
 80015ee:	f000 f88d 	bl	800170c <_isatty_r>
 80015f2:	b128      	cbz	r0, 8001600 <__smakebuf_r+0x74>
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	81a3      	strh	r3, [r4, #12]
 8001600:	89a0      	ldrh	r0, [r4, #12]
 8001602:	4305      	orrs	r5, r0
 8001604:	81a5      	strh	r5, [r4, #12]
 8001606:	e7cd      	b.n	80015a4 <__smakebuf_r+0x18>
 8001608:	080008f9 	.word	0x080008f9

0800160c <__malloc_lock>:
 800160c:	4801      	ldr	r0, [pc, #4]	; (8001614 <__malloc_lock+0x8>)
 800160e:	f7ff ba45 	b.w	8000a9c <__retarget_lock_acquire_recursive>
 8001612:	bf00      	nop
 8001614:	20000098 	.word	0x20000098

08001618 <__malloc_unlock>:
 8001618:	4801      	ldr	r0, [pc, #4]	; (8001620 <__malloc_unlock+0x8>)
 800161a:	f7ff ba40 	b.w	8000a9e <__retarget_lock_release_recursive>
 800161e:	bf00      	nop
 8001620:	20000098 	.word	0x20000098

08001624 <_free_r>:
 8001624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001626:	2900      	cmp	r1, #0
 8001628:	d048      	beq.n	80016bc <_free_r+0x98>
 800162a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800162e:	9001      	str	r0, [sp, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f1a1 0404 	sub.w	r4, r1, #4
 8001636:	bfb8      	it	lt
 8001638:	18e4      	addlt	r4, r4, r3
 800163a:	f7ff ffe7 	bl	800160c <__malloc_lock>
 800163e:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <_free_r+0x9c>)
 8001640:	9801      	ldr	r0, [sp, #4]
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	4615      	mov	r5, r2
 8001646:	b933      	cbnz	r3, 8001656 <_free_r+0x32>
 8001648:	6063      	str	r3, [r4, #4]
 800164a:	6014      	str	r4, [r2, #0]
 800164c:	b003      	add	sp, #12
 800164e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001652:	f7ff bfe1 	b.w	8001618 <__malloc_unlock>
 8001656:	42a3      	cmp	r3, r4
 8001658:	d90b      	bls.n	8001672 <_free_r+0x4e>
 800165a:	6821      	ldr	r1, [r4, #0]
 800165c:	1862      	adds	r2, r4, r1
 800165e:	4293      	cmp	r3, r2
 8001660:	bf04      	itt	eq
 8001662:	681a      	ldreq	r2, [r3, #0]
 8001664:	685b      	ldreq	r3, [r3, #4]
 8001666:	6063      	str	r3, [r4, #4]
 8001668:	bf04      	itt	eq
 800166a:	1852      	addeq	r2, r2, r1
 800166c:	6022      	streq	r2, [r4, #0]
 800166e:	602c      	str	r4, [r5, #0]
 8001670:	e7ec      	b.n	800164c <_free_r+0x28>
 8001672:	461a      	mov	r2, r3
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	b10b      	cbz	r3, 800167c <_free_r+0x58>
 8001678:	42a3      	cmp	r3, r4
 800167a:	d9fa      	bls.n	8001672 <_free_r+0x4e>
 800167c:	6811      	ldr	r1, [r2, #0]
 800167e:	1855      	adds	r5, r2, r1
 8001680:	42a5      	cmp	r5, r4
 8001682:	d10b      	bne.n	800169c <_free_r+0x78>
 8001684:	6824      	ldr	r4, [r4, #0]
 8001686:	4421      	add	r1, r4
 8001688:	1854      	adds	r4, r2, r1
 800168a:	42a3      	cmp	r3, r4
 800168c:	6011      	str	r1, [r2, #0]
 800168e:	d1dd      	bne.n	800164c <_free_r+0x28>
 8001690:	681c      	ldr	r4, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	6053      	str	r3, [r2, #4]
 8001696:	4421      	add	r1, r4
 8001698:	6011      	str	r1, [r2, #0]
 800169a:	e7d7      	b.n	800164c <_free_r+0x28>
 800169c:	d902      	bls.n	80016a4 <_free_r+0x80>
 800169e:	230c      	movs	r3, #12
 80016a0:	6003      	str	r3, [r0, #0]
 80016a2:	e7d3      	b.n	800164c <_free_r+0x28>
 80016a4:	6825      	ldr	r5, [r4, #0]
 80016a6:	1961      	adds	r1, r4, r5
 80016a8:	428b      	cmp	r3, r1
 80016aa:	bf04      	itt	eq
 80016ac:	6819      	ldreq	r1, [r3, #0]
 80016ae:	685b      	ldreq	r3, [r3, #4]
 80016b0:	6063      	str	r3, [r4, #4]
 80016b2:	bf04      	itt	eq
 80016b4:	1949      	addeq	r1, r1, r5
 80016b6:	6021      	streq	r1, [r4, #0]
 80016b8:	6054      	str	r4, [r2, #4]
 80016ba:	e7c7      	b.n	800164c <_free_r+0x28>
 80016bc:	b003      	add	sp, #12
 80016be:	bd30      	pop	{r4, r5, pc}
 80016c0:	2000008c 	.word	0x2000008c

080016c4 <_read_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d07      	ldr	r5, [pc, #28]	; (80016e4 <_read_r+0x20>)
 80016c8:	4604      	mov	r4, r0
 80016ca:	4608      	mov	r0, r1
 80016cc:	4611      	mov	r1, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	602a      	str	r2, [r5, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f7fe fff0 	bl	80006b8 <_read>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d102      	bne.n	80016e2 <_read_r+0x1e>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	b103      	cbz	r3, 80016e2 <_read_r+0x1e>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	200000a0 	.word	0x200000a0

080016e8 <_fstat_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4d07      	ldr	r5, [pc, #28]	; (8001708 <_fstat_r+0x20>)
 80016ec:	2300      	movs	r3, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	602b      	str	r3, [r5, #0]
 80016f6:	f7ff f808 	bl	800070a <_fstat>
 80016fa:	1c43      	adds	r3, r0, #1
 80016fc:	d102      	bne.n	8001704 <_fstat_r+0x1c>
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	b103      	cbz	r3, 8001704 <_fstat_r+0x1c>
 8001702:	6023      	str	r3, [r4, #0]
 8001704:	bd38      	pop	{r3, r4, r5, pc}
 8001706:	bf00      	nop
 8001708:	200000a0 	.word	0x200000a0

0800170c <_isatty_r>:
 800170c:	b538      	push	{r3, r4, r5, lr}
 800170e:	4d06      	ldr	r5, [pc, #24]	; (8001728 <_isatty_r+0x1c>)
 8001710:	2300      	movs	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	602b      	str	r3, [r5, #0]
 8001718:	f7ff f807 	bl	800072a <_isatty>
 800171c:	1c43      	adds	r3, r0, #1
 800171e:	d102      	bne.n	8001726 <_isatty_r+0x1a>
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	b103      	cbz	r3, 8001726 <_isatty_r+0x1a>
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	bd38      	pop	{r3, r4, r5, pc}
 8001728:	200000a0 	.word	0x200000a0

0800172c <_init>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr

08001738 <_fini>:
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	bf00      	nop
 800173c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173e:	bc08      	pop	{r3}
 8001740:	469e      	mov	lr, r3
 8001742:	4770      	bx	lr
